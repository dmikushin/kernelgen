#!/usr/bin/perl -w

##
## KGen - the LLVM-based compiler with GPU kernels generation over C backend.
##
## Copyright (c) 2011 Dmitry Mikushin
##
## This software is provided 'as-is', without any express or implied warranty.
## In no event will the authors be held liable for any damages arising 
## from the use of this software.
## Permission is granted to anyone to use this software for any purpose, 
## including commercial applications, and to alter it and redistribute it freely,
## subject to the following restrictions:
##
## 1. The origin of this software must not be misrepresented;
## you must not claim that you wrote the original software.
## If you use this software in a product, an acknowledgment
## in the product documentation would be appreciated but is not required.
## 2. Altered source versions must be plainly marked as such,
## and must not be misrepresented as being the original software.
## 3. This notice may not be removed or altered from any source distribution.
##

if (scalar(@ARGV) != 7)
{
	print "Usage: kgen-install ARCH KGEN_BUILD_PREFIX KGEN_PREFIX LLVM_BIN_PREFIX GCC_BIN_PREFIX DRAGONEGG_PREFIX CUDA_PREFIX\n";
	exit;
}

my($ARCH) = $ARGV[0];
my($KGEN_BUILD_PREFIX) = $ARGV[1];
my($KGEN_PREFIX) = $ARGV[2];
my($LLVM_BIN_PREFIX) = $ARGV[3];
my($GCC_BIN_PREFIX) = $ARGV[4];
my($DRAGONEGG_PREFIX) = $ARGV[5];
my($CUDA_PREFIX) = $ARGV[6];

`mkdir -p $KGEN_BUILD_PREFIX/bin`;
`mkdir -p $KGEN_BUILD_PREFIX/include`;
`mkdir -p $KGEN_BUILD_PREFIX/lib`;
`mkdir -p $KGEN_BUILD_PREFIX/opts`;

if ($ARCH eq "64")
{
	`mkdir -p $KGEN_BUILD_PREFIX/include64`;
	`mkdir -p $KGEN_BUILD_PREFIX/lib64`;
}

#
# For each kgen script load its content, replace paths
# and copy to install path.
#
my(@scripts) = (
	"kgen",
	"kgen-exec",
	"kgen-ir",
	"kgen-cpu",
	"kgen-cuda",
	"kgen-opencl",
	"kgen-gfortran",
	"kgen-transform");
foreach $script (@scripts)
{
	open(kgen_fh, $script);
	my($kgen) = do { local $/; <kgen_fh> };
	close(kgen_fh);
	$kgen =~ s/ARCH/$ARCH/g;
	$kgen =~ s/KGEN_PREFIX/$KGEN_PREFIX/g;
	$kgen =~ s/LLVM_BIN_PREFIX/$LLVM_BIN_PREFIX/g;
	$kgen =~ s/GCC_BIN_PREFIX/$GCC_BIN_PREFIX/g;
	$kgen =~ s/DRAGONEGG_PREFIX/$DRAGONEGG_PREFIX/g;
	$kgen =~ s/CUDA_PREFIX/$CUDA_PREFIX/g;
	open(kgen_fh, ">$KGEN_BUILD_PREFIX\/bin\/$script");
	print kgen_fh "$kgen";
	close(kgen_fh);
	`chmod +x $KGEN_BUILD_PREFIX\/bin\/$script`;
}

#
# Discard executable bit for kgen, as it is
# not supposed to be executed by users.
#
`chmod -x $KGEN_BUILD_PREFIX\/bin\/kgen`;

#
# Copy binaries to install path.
#
my(@binaries) = (
	"g95xml_tree/g95xml-tree",
	"g95xml_refids/g95xml-refids",
	"kgen-embed/kgen-ir-embed",
	"kgen-embed/kgen-opencl-embed");

if (-e "kgen-embed/kgen-cuda-embed")
{
	push(@binaries, "kgen-embed/kgen-cuda-embed");
}

foreach $binary (@binaries)
{
	`cp $binary $KGEN_BUILD_PREFIX\/bin\/`;
}

#
# Copy includes to install path.
#
my(@includes32) = (
	"libkernelgen/kernelgen.h",
	"libkernelgen/32/kernelgen.mod",
	"libkernelgen/32/kernelgen.dragonegg.mod");
foreach $include (@includes32)
{
	`cp $include $KGEN_BUILD_PREFIX\/include\/`;
}
if ($ARCH eq "64")
{
	my(@includes64) = (
		"libkernelgen/kernelgen.h",
		"libkernelgen/64/kernelgen.mod",
		"libkernelgen/64/kernelgen.dragonegg.mod");
	foreach $include (@includes64)
	{
		`cp $include $KGEN_BUILD_PREFIX\/include64\/`;
	}
}

#
# Copy libraries to install path.
#
my(@libraries32) = (
	"libkernelgen/32/libkernelgen.so");
foreach $library (@libraries32)
{
	`cp $library $KGEN_BUILD_PREFIX\/lib\/`;
}
if ($ARCH eq "64")
{
	my(@libraries64) = (
		"libkernelgen/64/libkernelgen.so");
	foreach $library (@libraries64)
	{
		`cp $library $KGEN_BUILD_PREFIX\/lib64\/`;
	}
}

#
# Copy opts to install path.
#
my(@opts) = (
	"options/gcc.opts",
	"options/nvcc.opts",
	"options/kgen-opencl-embed.opts");
foreach $opt (@opts)
{
	`cp $opt $KGEN_BUILD_PREFIX\/opts\/`;
}

#
# Copy folders to install path.
#
my(@folders) = (
	"transforms");
foreach $folder (@folders)
{
	`cp -r $folder $KGEN_BUILD_PREFIX\/`;
}

#
# Clear subversion tags.
#
`find $KGEN_BUILD_PREFIX -name ".svn" -exec rm -rf {} \\; 2>/dev/null`;


