; ModuleID = 'sincos.sincos_loop_1_kernelgen.c.device.F90'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-f128:128:128-n8:16:32:64"
target triple = "x86_64-unknown-linux-gnu"

module asm "\09.ident\09\22GCC: (GNU) 4.5.4 20110810 (prerelease) LLVM: 136347M\22"

define void @sincos_loop_1_kernelgen_(i32* %nz, i32* %ny, i32* %nx, [0 x float]* %xy, [0 x float]* %x, [0 x float]* %y) nounwind uwtable {
entry:
  %nz_addr = alloca i32*, align 8
  %ny_addr = alloca i32*, align 8
  %nx_addr = alloca i32*, align 8
  %xy_addr = alloca [0 x float]*, align 8
  %x_addr = alloca [0 x float]*, align 8
  %y_addr = alloca [0 x float]*, align 8
  %"alloca point" = bitcast i32 0 to i32
  store i32* %nz, i32** %nz_addr
  store i32* %ny, i32** %ny_addr
  store i32* %nx, i32** %nx_addr
  store [0 x float]* %xy, [0 x float]** %xy_addr
  store [0 x float]* %x, [0 x float]** %x_addr
  store [0 x float]* %y, [0 x float]** %y_addr
  %0 = load i32** %nx_addr, align 64
  %1 = load i32** %ny_addr, align 64
  %2 = load i32** %nz_addr, align 64
  %3 = load [0 x float]** %x_addr, align 64
  %4 = load [0 x float]** %y_addr, align 64
  %5 = load [0 x float]** %xy_addr, align 64
  %"ssa point" = bitcast i32 0 to i32
  br label %"2"

"2":                                              ; preds = %entry
  %6 = load i32* %0, align 4
  %7 = sext i32 %6 to i64
  %8 = icmp sge i64 %7, 0
  %9 = select i1 %8, i64 %7, i64 0
  %10 = load i32* %1, align 4
  %11 = sext i32 %10 to i64
  %12 = mul nsw i64 %9, %11
  %13 = icmp sge i64 %12, 0
  %14 = select i1 %13, i64 %12, i64 0
  %15 = load i32* %2, align 4
  %16 = sext i32 %15 to i64
  %17 = mul nsw i64 %14, %16
  %18 = icmp sge i64 %17, 0
  %19 = select i1 %18, i64 %17, i64 0
  %20 = add nsw i64 %19, -1
  %21 = mul i64 %19, 32
  %22 = mul i64 %19, 4
  %not = xor i64 %9, -1
  %23 = sub nsw i64 %not, %14
  %24 = load i32* %0, align 4
  %25 = sext i32 %24 to i64
  %26 = icmp sge i64 %25, 0
  %27 = select i1 %26, i64 %25, i64 0
  %28 = load i32* %1, align 4
  %29 = sext i32 %28 to i64
  %30 = mul nsw i64 %27, %29
  %31 = icmp sge i64 %30, 0
  %32 = select i1 %31, i64 %30, i64 0
  %33 = load i32* %2, align 4
  %34 = sext i32 %33 to i64
  %35 = mul nsw i64 %32, %34
  %36 = icmp sge i64 %35, 0
  %37 = select i1 %36, i64 %35, i64 0
  %38 = add nsw i64 %37, -1
  %39 = mul i64 %37, 32
  %40 = mul i64 %37, 4
  %not1 = xor i64 %27, -1
  %41 = sub nsw i64 %not1, %32
  %42 = load i32* %0, align 4
  %43 = sext i32 %42 to i64
  %44 = icmp sge i64 %43, 0
  %45 = select i1 %44, i64 %43, i64 0
  %46 = load i32* %1, align 4
  %47 = sext i32 %46 to i64
  %48 = mul nsw i64 %45, %47
  %49 = icmp sge i64 %48, 0
  %50 = select i1 %49, i64 %48, i64 0
  %51 = load i32* %2, align 4
  %52 = sext i32 %51 to i64
  %53 = mul nsw i64 %50, %52
  %54 = icmp sge i64 %53, 0
  %55 = select i1 %54, i64 %53, i64 0
  %56 = add nsw i64 %55, -1
  %57 = mul i64 %55, 32
  %58 = mul i64 %55, 4
  %not2 = xor i64 %45, -1
  %59 = sub nsw i64 %not2, %50
  %60 = load i32* %2, align 4
  %61 = icmp sle i32 1, %60
  br i1 %61, label %"3", label %"11"

"3":                                              ; preds = %"10", %"2"
  %62 = phi i32 [ %111, %"10" ], [ 1, %"2" ]
  %63 = load i32* %1, align 4
  %64 = icmp sle i32 1, %63
  br i1 %64, label %"4", label %"9"

"4":                                              ; preds = %"8", %"3"
  %65 = phi i32 [ %108, %"8" ], [ 1, %"3" ]
  %66 = load i32* %0, align 4
  %67 = icmp sle i32 1, %66
  br i1 %67, label %"5", label %"7"

"5":                                              ; preds = %"6", %"4"
  %68 = phi i32 [ %105, %"6" ], [ 1, %"4" ]
  %69 = sext i32 %68 to i64
  %70 = sext i32 %62 to i64
  %71 = mul nsw i64 %70, %14
  %72 = sext i32 %65 to i64
  %73 = mul nsw i64 %72, %9
  %74 = add nsw i64 %71, %73
  %75 = add nsw i64 %69, %74
  %76 = add nsw i64 %75, %23
  %77 = sext i32 %68 to i64
  %78 = sext i32 %62 to i64
  %79 = mul nsw i64 %78, %32
  %80 = sext i32 %65 to i64
  %81 = mul nsw i64 %80, %27
  %82 = add nsw i64 %79, %81
  %83 = add nsw i64 %77, %82
  %84 = add nsw i64 %83, %41
  %85 = bitcast [0 x float]* %3 to float*
  %86 = getelementptr float* %85, i64 %84
  %87 = load float* %86, align 4
  %88 = call float @sinf(float %87) nounwind readnone
  %89 = sext i32 %68 to i64
  %90 = sext i32 %62 to i64
  %91 = mul nsw i64 %90, %50
  %92 = sext i32 %65 to i64
  %93 = mul nsw i64 %92, %45
  %94 = add nsw i64 %91, %93
  %95 = add nsw i64 %89, %94
  %96 = add nsw i64 %95, %59
  %97 = bitcast [0 x float]* %4 to float*
  %98 = getelementptr float* %97, i64 %96
  %99 = load float* %98, align 4
  %100 = call float @cosf(float %99) nounwind readnone
  %101 = fadd float %88, %100
  %102 = bitcast [0 x float]* %5 to float*
  %103 = getelementptr float* %102, i64 %76
  store float %101, float* %103, align 4
  %104 = icmp eq i32 %68, %66
  %105 = add nsw i32 %68, 1
  %106 = icmp ne i1 %104, false
  br i1 %106, label %"7", label %"6"

"6":                                              ; preds = %"5"
  br label %"5"

"7":                                              ; preds = %"5", %"4"
  %107 = icmp eq i32 %65, %63
  %108 = add nsw i32 %65, 1
  %109 = icmp ne i1 %107, false
  br i1 %109, label %"9", label %"8"

"8":                                              ; preds = %"7"
  br label %"4"

"9":                                              ; preds = %"7", %"3"
  %110 = icmp eq i32 %62, %60
  %111 = add nsw i32 %62, 1
  %112 = icmp ne i1 %110, false
  br i1 %112, label %"11", label %"10"

"10":                                             ; preds = %"9"
  br label %"3"

"11":                                             ; preds = %"9", %"2"
  br label %return

return:                                           ; preds = %"11"
  ret void
}

declare float @sinf(float) nounwind readnone

declare float @cosf(float) nounwind readnone
