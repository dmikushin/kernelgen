target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-f128:128:128-n8:16:32:64"
target triple = "x86_64-unknown-linux-gnu"

module asm "\09.ident\09\22GCC: (GNU) 4.6.2 20111015 (prerelease) LLVM: 136347M\22"

define internal i32 @main_loop_7(i32* %IntPtrToStruct) nounwind {
"Loop Function Root":
  br label %"Loop Function Root.split"

"Loop Function Root.split":                       ; preds = %"Loop Function Root"
  %load_ptr_memtmp = getelementptr i32* %IntPtrToStruct, i64 2
  %0 = bitcast i32* %load_ptr_memtmp to [1000 x [1000 x i32]]**
  %load_memtmp = load [1000 x [1000 x i32]]** %0, align 8
  br label %"5.cloned.preheader"

"5.cloned.preheader":                             ; preds = %"6.cloned", %"Loop Function Root.split"
  %indvar1 = phi i64 [ 0, %"Loop Function Root.split" ], [ %1, %"6.cloned" ]
  br label %"4.cloned"

"6.cloned":                                       ; preds = %"4.cloned"
  %1 = add i64 %indvar1, 1
  %exitcond = icmp eq i64 %1, 1000
  br i1 %exitcond, label %"8.exitStub", label %"5.cloned.preheader"

"4.cloned":                                       ; preds = %"4.cloned", %"5.cloned.preheader"
  %indvar = phi i64 [ 0, %"5.cloned.preheader" ], [ %2, %"4.cloned" ]
  %tmp20.moved.to.4.cloned = add i64 %indvar1, 200
  %scevgep = getelementptr [1000 x [1000 x i32]]* %load_memtmp, i64 0, i64 %indvar1, i64 %indvar
  %tmp21 = add i64 %tmp20.moved.to.4.cloned, %indvar
  %tmp4 = trunc i64 %tmp21 to i32
  store i32 %tmp4, i32* %scevgep, align 4
  %2 = add i64 %indvar, 1
  %exitcond14 = icmp eq i64 %2, 1000
  br i1 %exitcond14, label %"6.cloned", label %"4.cloned"

"8.exitStub":                                     ; preds = %"6.cloned"
  ret i32 0
}
