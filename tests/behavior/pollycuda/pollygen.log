marcusmae@T61p:~/Programming/kernelgen/branches/accurate/tests/behavior/pollycuda$ make pollygen
kernelgen_runmode=1 kernelgen_verbose=1 kernelgen_dump_pollygen=1 64/pollycuda
Using KernelGen/CUDA

Building kernels index ...
__kernelgen_main_loop_7
__kernelgen_main

__kernelgen_main @ 20457283189120157942421148010221015785202
No prebuilt kernel, compiling...
native: kernelgen_launch
hostcall: _get_threadId_x
hostcall: _get_blockId_x
hostcall: _get_blockDim_x
hostcall: _get_gridDim_x
hostcall: _get_threadId_y
hostcall: _get_blockId_y
hostcall: _get_blockDim_y
hostcall: _get_gridDim_y
; ModuleID = '__kernelgen_main_module'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-f128:128:128-n8:16:32:64"
target triple = "x86_64-unknown-linux-gnu"

declare i64 @_get_threadId_x()

declare i64 @_get_blockId_x()

declare i64 @_get_blockDim_x()

declare i64 @_get_gridDim_x()

declare i64 @_get_threadId_y()

declare i64 @_get_blockId_y()

declare i64 @_get_blockDim_y()

declare i64 @_get_gridDim_y()

define void @__kernelgen__get_threadId_x({ i64 }* nocapture) nounwind {
newFuncRoot:
  br label %newFuncRoot.split

newFuncRoot.split:                                ; preds = %newFuncRoot
  %threadId.x = tail call i64 @_get_threadId_x() nounwind
  %gep_threadId.x = getelementptr { i64 }* %0, i64 0, i32 0
  store i64 %threadId.x, i64* %gep_threadId.x, align 8
  ret void
}

define void @__kernelgen__get_blockId_x({ i64 }* nocapture) nounwind {
newFuncRoot:
  br label %newFuncRoot.split

newFuncRoot.split:                                ; preds = %newFuncRoot
  %blockId.x = tail call i64 @_get_blockId_x() nounwind
  %gep_blockId.x = getelementptr { i64 }* %0, i64 0, i32 0
  store i64 %blockId.x, i64* %gep_blockId.x, align 8
  ret void
}

define void @__kernelgen__get_blockDim_x({ i64 }* nocapture) nounwind {
newFuncRoot:
  br label %newFuncRoot.split

newFuncRoot.split:                                ; preds = %newFuncRoot
  %blockDim.x = tail call i64 @_get_blockDim_x() nounwind
  %gep_blockDim.x = getelementptr { i64 }* %0, i64 0, i32 0
  store i64 %blockDim.x, i64* %gep_blockDim.x, align 8
  ret void
}

define void @__kernelgen__get_gridDim_x({ i64 }* nocapture) nounwind {
newFuncRoot:
  br label %newFuncRoot.split

newFuncRoot.split:                                ; preds = %newFuncRoot
  %gridDim.x = tail call i64 @_get_gridDim_x() nounwind
  %gep_gridDim.x = getelementptr { i64 }* %0, i64 0, i32 0
  store i64 %gridDim.x, i64* %gep_gridDim.x, align 8
  ret void
}

define void @__kernelgen__get_threadId_y({ i64 }* nocapture) nounwind {
newFuncRoot:
  br label %newFuncRoot.split

newFuncRoot.split:                                ; preds = %newFuncRoot
  %threadId.y = tail call i64 @_get_threadId_y() nounwind
  %gep_threadId.y = getelementptr { i64 }* %0, i64 0, i32 0
  store i64 %threadId.y, i64* %gep_threadId.y, align 8
  ret void
}

define void @__kernelgen__get_blockId_y({ i64 }* nocapture) nounwind {
newFuncRoot:
  br label %newFuncRoot.split

newFuncRoot.split:                                ; preds = %newFuncRoot
  %blockId.y = tail call i64 @_get_blockId_y() nounwind
  %gep_blockId.y = getelementptr { i64 }* %0, i64 0, i32 0
  store i64 %blockId.y, i64* %gep_blockId.y, align 8
  ret void
}

define void @__kernelgen__get_blockDim_y({ i64 }* nocapture) nounwind {
newFuncRoot:
  br label %newFuncRoot.split

newFuncRoot.split:                                ; preds = %newFuncRoot
  %blockDim.y = tail call i64 @_get_blockDim_y() nounwind
  %gep_blockDim.y = getelementptr { i64 }* %0, i64 0, i32 0
  store i64 %blockDim.y, i64* %gep_blockDim.y, align 8
  ret void
}

define void @__kernelgen__get_gridDim_y({ i64 }* nocapture) nounwind {
newFuncRoot:
  br label %newFuncRoot.split

newFuncRoot.split:                                ; preds = %newFuncRoot
  %gridDim.y = tail call i64 @_get_gridDim_y() nounwind
  %gep_gridDim.y = getelementptr { i64 }* %0, i64 0, i32 0
  store i64 %gridDim.y, i64* %gep_gridDim.y, align 8
  ret void
}

