##===- kernelgen.spec.in - KernelGen RPM build specification --------------===//
##
##     KernelGen -- A prototype of LLVM-based auto-parallelizing Fortran/C
##        compiler for NVIDIA GPUs, targeting numerical modeling code.
##
## This file is distributed under the University of Illinois Open Source
## License. See LICENSE.TXT for details.
##
##===----------------------------------------------------------------------===//

# Disable unpackaged files terminate build
%define _unpackaged_files_terminate_build 0
%define _missing_doc_files_terminate_build 0

#define kernelgen revision
%define kgen_rev KERNELGEN_REV

#define llvm revision
%define llvm_rev KERNELGEN_LLVM_REV

#define openmpi revision
%define openmpi_rev KERNELGEN_OPENMPI_REV

# Release name
%define release accurate

# Target operating system
%define target KERNELGEN_TARGET

# Path prefix relative to build or install root
%define prefix KERNELGEN_PREFIX

# Switch on or off the compilation of particular parts
# of the package (for bootstrapping).
%define cloog KERNELGEN_ENABLE_CLOOG
%define llvm KERNELGEN_ENABLE_LLVM
%define binutils KERNELGEN_ENABLE_BINUTILS
%define gmp KERNELGEN_ENABLE_GMP
%define mpfr KERNELGEN_ENABLE_MPFR
%define mpc KERNELGEN_ENABLE_MPC
%define libelf KERNELGEN_ENABLE_LIBELF
%define gcc KERNELGEN_ENABLE_GCC
%define gcc_bootstrap KERNELGEN_ENABLE_GCC_BOOTSTRAP
%define netcdf KERNELGEN_ENABLE_NETCDF
%define openmpi KERNELGEN_ENABLE_OPENMPI
%define dragonegg KERNELGEN_ENABLE_DRAGONEGG
%define libffi KERNELGEN_ENABLE_LIBFFI
%define mhash KERNELGEN_ENABLE_MHASH
%define glibc KERNELGEN_ENABLE_GLIBC
%define kernelgen KERNELGEN_ENABLE_KERNELGEN

%if (%target == "fedora")
%define lib32 lib
%define lib64 lib64
%endif

%if (%target == "debian")
%define lib32 lib32
%define lib64 lib
%endif

# Build unoptimized version with debug info
%define debug KERNELGEN_ENABLE_DEBUG

# Rebuild everything or only kernelgen
%define fullrepack KERNELGEN_FULLREPACK

# The number of parallel compilation jobs
%define njobs KERNELGEN_NJOBS

# Don't strip anything from binaries in case of debug
%if %debug
%define __os_install_post %{nil}
%endif

AutoReq: 0

Name:           kernelgen
Version:        0.2
Release:        %{release}
Summary:        Compiler with automatic generation of GPU kernels from the regular source code
Patch0:         dragonegg.ptx.patch
Patch1:         dragonegg.patch
Patch2:         llvm.polly.patch
Patch3:         llvm.scev.patch
Patch4:         llvm.statistic.patch
Patch5:         llvm.opts.patch
Patch6:         llvm.nvptx.patch
Patch7:         llvm.clang.patch
Patch8:		llvm.transforms.patch
Patch9:		llvm.rand.patch
Patch10:	binutils.patch
Patch11:	openmpi.cuda.patch
Patch12:	cloog.checkout.patch
Patch13:        libelf.patch
Patch14:	glibc.patch
Patch15:	gcc.patch
Patch16:        gcc-multiarch.patch
Patch17:        gcc.build.patch

Group:          Applications/Engineering
License:        GPL/BSD/Freeware
URL:            http://kernelgen.org/

%if (%target == fedora)
#BuildRequires:  gcc gcc-c++ gcc-gfortran perl elfutils-libelf-devel libffi-devel gmp-devel mpfr-devel libmpc-devel flex glibc-devel git autoconf automake libtool bison texinfo
#Requires:       elfutils-libelf libffi gmp mpfr libmpc
%else
#BuildRequires:	gcc g++ gfortran perl libelf-dev libffi-dev libgmp3-dev libmpfr-dev libmpc-dev flex libc6-dev libc6-dev-i386 gcc-multilib git autoconf automake libtool bison texinfo
#Requires:	libelf ffi libgmp3 libmpfr libmpc g++-4.6-multilib
%endif

Packager:       Dmitry Mikushin <maemarcus@gmail.com>

%description
A prototype of LLVM-based auto-parallelizing Fortran/C compiler for NVIDIA GPUs, targeting numerical modeling code.


#
# Remove old files, unpack fresh content from source archives.
#
%prep
%if %fullrepack
%if %llvm
rm -rf $RPM_BUILD_DIR/llvm
tar -xf $RPM_SOURCE_DIR/llvm-r%{llvm_rev}.tar.gz
cd $RPM_BUILD_DIR/llvm/tools
tar -xf $RPM_SOURCE_DIR/clang-r%{llvm_rev}.tar.gz
%endif
cd $RPM_BUILD_DIR
%if %binutils
rm -rf $RPM_BUILD_DIR/KERNELGEN_BINUTILS_SNAP
rm -rf $RPM_BUILD_DIR/binutils-snapshot
tar -xjf $RPM_SOURCE_DIR/KERNELGEN_BINUTILS_SNAP.tar.bz2
%endif
%if %gmp
rm -rf $RPM_BUILD_DIR/KERNELGEN_GMP_SNAP
tar -xjf $RPM_SOURCE_DIR/KERNELGEN_GMP_SNAP.tar.bz2
%endif
%if %mpfr
rm -rf $RPM_BUILD_DIR/KERNELGEN_MPFR_SNAP
tar -xf $RPM_SOURCE_DIR/KERNELGEN_MPFR_SNAP.tar.gz
%endif
%if %mpc
rm -rf $RPM_BUILD_DIR/KERNELGEN_MPC_SNAP
tar -xf $RPM_SOURCE_DIR/KERNELGEN_MPC_SNAP.tar.gz
%endif
%if %libelf
rm -rf $RPM_BUILD_DIR/KERNELGEN_LIBELF_SNAP
tar -xf $RPM_SOURCE_DIR/KERNELGEN_LIBELF_SNAP.tar.gz
%endif
%if %gcc
rm -rf $RPM_BUILD_DIR/KERNELGEN_GCC_SNAP
rm -rf $RPM_BUILD_DIR/gcc-snapshot
tar -xjf $RPM_SOURCE_DIR/KERNELGEN_GCC_SNAP.tar.bz2
ln -s $RPM_BUILD_DIR/KERNELGEN_GCC_SNAP $RPM_BUILD_DIR/gcc-snapshot
%endif
%if %netcdf
rm -rf $RPM_BUILD_DIR/KERNELGEN_NETCDF_SNAP
rm -rf $RPM_BUILD_DIR/netcdf-snapshot
tar -xf $RPM_SOURCE_DIR/KERNELGEN_NETCDF_SNAP.tar.gz
ln -s $RPM_BUILD_DIR/KERNELGEN_NETCDF_SNAP $RPM_BUILD_DIR/netcdf-snapshot
%endif
%if %openmpi
rm -rf $RPM_BUILD_DIR/openmpi
tar -xf $RPM_SOURCE_DIR/openmpi-r%{openmpi_rev}.tar.gz
%endif
%if %dragonegg
rm -rf $RPM_BUILD_DIR/dragonegg
tar -xf $RPM_SOURCE_DIR/dragonegg-r%{llvm_rev}.tar.gz
%endif
%if %cloog
mkdir -p $RPM_BUILD_DIR/llvm/tools
cd $RPM_BUILD_DIR/llvm/tools
tar -xf $RPM_SOURCE_DIR/polly-r%{llvm_rev}.tar.gz
rm -rf $RPM_BUILD_DIR/cloog
cd $RPM_BUILD_DIR
%endif
%if %libffi
rm -rf $RPM_BUILD_DIR/KERNELGEN_LIBFFI_SNAP
tar -xf $RPM_SOURCE_DIR/KERNELGEN_LIBFFI_SNAP.tar.gz
%endif
%if %mhash
rm -rf $RPM_BUILD_DIR/KERNELGEN_MHASH_SNAP
tar -xf $RPM_SOURCE_DIR/KERNELGEN_MHASH_SNAP.tar.gz
%endif
%if %glibc
rm -rf $RPM_BUILD_DIR/KERNELGEN_GLIBC_SNAP
tar -xf $RPM_SOURCE_DIR/KERNELGEN_GLIBC_SNAP.tar.gz
%endif
%endif


#
# Apply all source code patches prior to configuring.
#
%if %fullrepack
cd $RPM_BUILD_DIR
%if %dragonegg
%patch0 -p1
%patch1 -p1
%endif
%if %llvm
%patch2 -p1
%patch3 -p1
%patch4 -p1
%patch5 -p1
%patch6 -p1
%patch7 -p1
%patch8 -p1
%patch9 -p1
%endif
%if %binutils
%patch10 -p1
%endif
%if %openmpi
%patch11 -p1
%endif
%if %cloog
%patch12 -p1
%endif
%if %libelf
%patch13 -p1
%endif
%if %glibc
%patch14 -p1
%endif
%if %gcc
%patch15 -p1
%if (%target == debian)
%patch16 -p1
%endif
%endif
%endif


%build
%if %fullrepack
%if %cloog
#
# Configure CLooG.
#
sh $RPM_BUILD_DIR/llvm/tools/polly/utils/checkout_cloog.sh $RPM_BUILD_DIR/cloog 1
cd $RPM_BUILD_DIR/cloog
./autogen.sh
mkdir build
cd build
../configure --prefix=$RPM_BUILD_ROOT/%{prefix}
%endif
%if %llvm
#
# Configure LLVM
#
cd $RPM_BUILD_DIR/llvm
mkdir build
cp -rf include/ build/include/
cd build
%if %debug
../configure --enable-jit --enable-debug-runtime --enable-debug-symbols --enable-shared --prefix=$RPM_BUILD_ROOT/%{prefix} --enable-targets=host,nvptx --with-cloog=$RPM_INSTALL_PREFIX/%{prefix} --with-isl=$RPM_INSTALL_PREFIX/%{prefix}
%else
../configure --enable-jit --enable-optimized --enable-shared --prefix=$RPM_BUILD_ROOT/%{prefix} --enable-targets=host,nvptx --with-cloog=$RPM_INSTALL_PREFIX/%{prefix} --with-isl=$RPM_INSTALL_PREFIX/%{prefix}
%endif
%endif
%if %binutils
#
# Configure BinUtils
#
cd $RPM_BUILD_DIR/KERNELGEN_BINUTILS_SNAP
mkdir build
cd build
../configure --prefix=$RPM_BUILD_ROOT/%{prefix} --program-prefix=kernelgen- --enable-gold=default --disable-ld --enable-plugins --enable-lto --enable-werror=no
%endif
%if %gmp
#
# Configure GMP
#
cd $RPM_BUILD_DIR/KERNELGEN_GMP_SNAP
mkdir build
cd build/
../configure --prefix=$RPM_BUILD_ROOT/%{prefix} --enable-shared=no --with-pic=yes
%endif
%if %mpfr
#
# Configure MPFR
#
cd $RPM_BUILD_DIR/KERNELGEN_MPFR_SNAP
mkdir build
cd build/
../configure --prefix=$RPM_BUILD_ROOT/%{prefix} --enable-shared=no --with-pic=yes
%endif
%if %mpc
#
# Configure MPC
#
cd $RPM_BUILD_DIR/KERNELGEN_MPC_SNAP
mkdir build
cd build/
../configure --prefix=$RPM_BUILD_ROOT/%{prefix} --enable-shared=no --with-pic=yes --with-mpfr-include=$RPM_INSTALL_PREFIX/%{prefix}/include/ --with-mpfr-lib=$RPM_INSTALL_PREFIX/%{prefix}/lib --with-gmp-include=$RPM_INSTALL_PREFIX/%{prefix}/include/ --with-gmp-lib=$RPM_INSTALL_PREFIX/%{prefix}/lib
%endif
%if %libelf
#
# Configure LibELF
#
cd $RPM_BUILD_DIR/KERNELGEN_LIBELF_SNAP
mkdir build
cd build
CFLAGS="-g -O2 -fPIC" ../configure --prefix=$RPM_BUILD_ROOT/%{prefix} --enable-shared=no --enable-elf64=yes
%endif
%if %gcc
#
# Configure GCC
#
cd $RPM_BUILD_DIR/KERNELGEN_GCC_SNAP
mkdir build
cd build/
%if %gcc_bootstrap
../configure --prefix=$RPM_BUILD_ROOT/%{prefix} --program-prefix=kernelgen- --enable-languages=fortran,c++ --with-mpfr-include=$RPM_INSTALL_PREFIX/%{prefix}/include/ --with-mpfr-lib=$RPM_INSTALL_PREFIX/%{prefix}/lib --with-gmp-include=$RPM_INSTALL_PREFIX/%{prefix}/include/ --with-gmp-lib=$RPM_INSTALL_PREFIX/%{prefix}/lib --with-mpc-include=$RPM_INSTALL_PREFIX/%{prefix}/include/ --with-mpc-lib=$RPM_INSTALL_PREFIX/%{prefix}/lib --enable-plugin --enable-gold=default --disable-ld --with-ld=$RPM_INSTALL_PREFIX/%{prefix}/bin/kernelgen-ld
# --with-sysroot=$RPM_INSTALL_PREFIX/%{prefix}/usr
%else
../configure --prefix=$RPM_BUILD_ROOT/%{prefix} --program-prefix=kernelgen- --enable-languages=fortran,c++ --with-mpfr-include=$RPM_INSTALL_PREFIX/%{prefix}/include/ --with-mpfr-lib=$RPM_INSTALL_PREFIX/%{prefix}/lib --with-gmp-include=$RPM_INSTALL_PREFIX/%{prefix}/include/ --with-gmp-lib=$RPM_INSTALL_PREFIX/%{prefix}/lib --with-mpc-include=$RPM_INSTALL_PREFIX/%{prefix}/include/ --with-mpc-lib=$RPM_INSTALL_PREFIX/%{prefix}/lib --enable-plugin --enable-gold=default --disable-ld --with-ld=$RPM_INSTALL_PREFIX/%{prefix}/bin/kernelgen-ld --disable-bootstrap
%endif
%endif
%if %netcdf
#
# Configure NetCDF
#
cd $RPM_BUILD_DIR/KERNELGEN_NETCDF_SNAP
mkdir build
cd build/
KERNELGEN_FALLBACK=1 ../configure --prefix=$RPM_BUILD_ROOT/%{prefix} --disable-netcdf-4
%endif
%if %openmpi
#
# Configure OpenMPI
#
cd $RPM_BUILD_DIR/openmpi
./autogen.pl
mkdir build
cd build
%if %debug
KERNELGEN_FALLBACK=1 ../configure --prefix=$RPM_BUILD_ROOT/%{prefix} --disable-mpi-interface-warning --with-cuda=/opt/cuda --with-cuda-libdir=/usr/%{lib64} --enable-debug
%else
KERNELGEN_FALLBACK=1 ../configure --prefix=$RPM_BUILD_ROOT/%{prefix} --disable-mpi-interface-warning --with-cuda=/opt/cuda --with-cuda-libdir=/usr/%{lib64}
%endif
%endif
%if %libffi
#
# Configure LibFFI
#
cd $RPM_BUILD_DIR/KERNELGEN_LIBFFI_SNAP
mkdir build
cd build
../configure --prefix=$RPM_BUILD_ROOT/%{prefix} --enable-shared=no --with-pic=yes
%endif
%if %mhash
#
# Configure MHASH
#
cd $RPM_BUILD_DIR/KERNELGEN_MHASH_SNAP
./configure --prefix=$RPM_BUILD_ROOT/%{prefix} --enable-shared=no --with-pic=yes
%endif
%if %glibc
#
# Configure GLIBC
#
cd $RPM_BUILD_DIR/KERNELGEN_GLIBC_SNAP
mkdir build
cd build
../configure --prefix=$RPM_BUILD_ROOT/%{prefix}/.. --bindir=$RPM_BUILD_ROOT/%{prefix}/bin --sbindir=$RPM_BUILD_ROOT/%{prefix}/sbin --libexecdir=$RPM_BUILD_ROOT/%{prefix}/libexec --sysconfdir=$RPM_BUILD_ROOT/%{prefix}/etc --includedir=$RPM_BUILD_ROOT/%{prefix}/include --datarootdir=$RPM_BUILD_ROOT/%{prefix}/share --datadir=$RPM_BUILD_ROOT/%{prefix}/share
%endif
%endif
%if %kernelgen
#
# Configure KernelGen
#
rm -rf $RPM_BUILD_DIR/kernelgen
cd $RPM_BUILD_DIR
tar -xf $RPM_SOURCE_DIR/kernelgen-r%{kgen_rev}.tar.gz
cd $RPM_BUILD_DIR/kernelgen
mkdir build
cd build
%if %debug
cmake -DCMAKE_INSTALL_PREFIX=$RPM_BUILD_ROOT/%{prefix} -DRPM_INSTALL_PREFIX=$RPM_INSTALL_PREFIX ..
%else
cmake -DCMAKE_INSTALL_PREFIX=$RPM_BUILD_ROOT/%{prefix} -DRPM_INSTALL_PREFIX=$RPM_INSTALL_PREFIX -DOPT=3 ..
%endif
cd $RPM_BUILD_DIR
%endif


#
# Build parts of the system
#
%if %fullrepack
%if %cloog
#
# Build CLooG.
#
cd $RPM_BUILD_DIR/cloog/build
%if %debug
make -j%{njobs} CXXFLAGS=-O0
%else
make -j%{njobs}
%endif
%endif
%if %llvm
#
# Build LLVM
#
cd $RPM_BUILD_DIR/llvm/build
%if %debug
make -j%{njobs} CXXFLAGS=-O0
%else
make -j%{njobs}
%endif
%endif
%if %binutils
#
# Build BinUtils
#
cd $RPM_BUILD_DIR/KERNELGEN_BINUTILS_SNAP/build
%if %debug
make -j%{njobs} CFLAGS="-g -O0" CXXFLAGS="-g -O0"
%else
make -j%{njobs}
%endif
%endif
%if %gmp
#
# Build GMP
#
cd $RPM_BUILD_DIR/KERNELGEN_GMP_SNAP/build
%if %debug
KERNELGEN_FALLBACK=1 make -j%{njobs} CFLAGS="-g -O0" CXXFLAGS="-g -O0"
%else
KERNELGEN_FALLBACK=1 make -j%{njobs}
%endif
%endif
%if %mpfr
#
# Build MPFR
#
cd $RPM_BUILD_DIR/KERNELGEN_MPFR_SNAP/build
%if %debug
KERNELGEN_FALLBACK=1 make -j%{njobs} CFLAGS="-g -O0" CXXFLAGS="-g -O0"
%else
KERNELGEN_FALLBACK=1 make -j%{njobs}
%endif
%endif
%if %mpc
#
# Build MPC
#
cd $RPM_BUILD_DIR/KERNELGEN_MPC_SNAP/build
%if %debug
KERNELGEN_FALLBACK=1 make -j%{njobs} CFLAGS="-g -O0" CXXFLAGS="-g -O0"
%else
KERNELGEN_FALLBACK=1 make -j%{njobs}
%endif
%endif
%if %libelf
#
# Build LibELF
#
cd $RPM_BUILD_DIR/KERNELGEN_LIBELF_SNAP/build
%if %debug
KERNELGEN_FALLBACK=1 make -j%{njobs} CFLAGS="-g -O0 -fPIC -shared"
%else
KERNELGEN_FALLBACK=1 make -j%{njobs} CFLAGS="-g -O2 -fPIC -shared"
%endif
%endif
%if %gcc
#
# Build GCC
#
cd $RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/build
%if %debug
CPLUS_INCLUDE_PATH=$RPM_INSTALL_PREFIX/%{prefix}/include:$RPM_INSTALL_PREFIX/%{prefix}/include/libelf KERNELGEN_FALLBACK=1 make -j%{njobs} CFLAGS="-g -O0" CXXFLAGS="-g -O0"
%else
CPLUS_INCLUDE_PATH=$RPM_INSTALL_PREFIX/%{prefix}/include:$RPM_INSTALL_PREFIX/%{prefix}/include/libelf KERNELGEN_FALLBACK=1 make -j%{njobs}
%endif
%endif
%if %netcdf
#
# Build NetCDF
#
cd $RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/build
%if %debug
KERNELGEN_FALLBACK=1 make -j%{njobs} CFLAGS="-g -O0" CXXFLAGS="-g -O0" FFLAGS="-g -O0" FCFLAGS="-g -O0"
%else
KERNELGEN_FALLBACK=1 make -j%{njobs}
%endif
%endif
%if %openmpi
#
# Build OpenMPI
#
cd $RPM_BUILD_DIR/openmpi/build
KERNELGEN_FALLBACK=1 make -j%{njobs}
%endif
%if %dragonegg
#
# Build DragonEgg
#
cd $RPM_BUILD_DIR/dragonegg
%if %debug
GCC=$RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/build/gcc/xgcc LLVM_CONFIG=$RPM_BUILD_DIR/llvm/build/Debug+Asserts/bin/llvm-config make clean
CPLUS_INCLUDE_PATH=$RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/gcc/:$RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/build/gcc/:$RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/include/:$RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/libcpp/include/ GCC=$RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/build/gcc/xgcc LLVM_CONFIG=$RPM_BUILD_DIR/llvm/build/Debug+Asserts/bin/llvm-config make CXXFLAGS="-g -O0 -fPIC"
%else
GCC=$RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/build/gcc/xgcc LLVM_CONFIG=$RPM_BUILD_DIR/llvm/build/Release+Asserts/bin/llvm-config make clean
CPLUS_INCLUDE_PATH=$RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/gcc/:$RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/build/gcc/:$RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/include/:$RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/libcpp/include/ GCC=$RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/build/gcc/xgcc LLVM_CONFIG=$RPM_BUILD_DIR/llvm/build/Release+Asserts/bin/llvm-config make
%endif
%endif
%if %gcc
cd $RPM_BUILD_DIR
patch -p1 <$RPM_SOURCE_DIR/gcc.build.patch
%endif
%if %libffi
#
# Build LibFFI
#
cd $RPM_BUILD_DIR/KERNELGEN_LIBFFI_SNAP/build
%if %debug
KERNELGEN_FALLBACK=1 make -j%{njobs} CFLAGS="-g -O0" CXXFLAGS="-g -O0"
%else
KERNELGEN_FALLBACK=1 make -j%{njobs}
%endif
%endif
%if %mhash
#
# Build MHASH
#
cd $RPM_BUILD_DIR/KERNELGEN_MHASH_SNAP
%if %debug
KERNELGEN_FALLBACK=1 make -j%{njobs} CFLAGS="-g -O0" CXXFLAGS="-g -O0"
%else
KERNELGEN_FALLBACK=1 make -j%{njobs}
%endif
%endif
%if %glibc
#
# Build GLIBC
#
cd $RPM_BUILD_DIR/KERNELGEN_GLIBC_SNAP/build
%if %debug
KERNELGEN_FALLBACK=1 make -j%{njobs} CFLAGS="-g -O1 -U_FORTIFY_SOURCE -fno-stack-protector"
%else
KERNELGEN_FALLBACK=1 make -j%{njobs}
%endif
%endif
%endif
%if %kernelgen
#
# Build KernelGen
#
cd $RPM_BUILD_DIR/kernelgen/build
make -j%{njobs}
%endif


#
# Install software to the build root.
#
%install
#
# Create directories srtucture.
#
rm -rf $RPM_BUILD_ROOT
%if %cloog
#
# Install CLooG
#
cd $RPM_BUILD_DIR/cloog/build
make install -j%{njobs}
%endif
%if %llvm
#
# Install LLVM
#
cd $RPM_BUILD_DIR/llvm/build
make install -j%{njobs}
%endif
%if %dragonegg
#
# Install DragonEgg
#
cp $RPM_BUILD_DIR/dragonegg/dragonegg.so $RPM_BUILD_ROOT/%{prefix}/lib/
%endif
%if %libffi
#
# Install LibFFI
#
cd $RPM_BUILD_DIR/KERNELGEN_LIBFFI_SNAP/build
KERNELGEN_FALLBACK=1 make install
%endif
%if %mhash
#
# Install MHASH
#
cd $RPM_BUILD_DIR/KERNELGEN_MHASH_SNAP
KERNELGEN_FALLBACK=1 make install
%endif
%if %kernelgen
#
# Install KernelGen
#
cd $RPM_BUILD_DIR/kernelgen/build
make install
%endif
%if %binutils
#
# Install BinUtils
#
cd $RPM_BUILD_DIR/KERNELGEN_BINUTILS_SNAP/build
make install -j%{njobs}
%endif
%if %gmp
#
# Install GMP
#
cd $RPM_BUILD_DIR/KERNELGEN_GMP_SNAP/build
KERNELGEN_FALLBACK=1 make install
%endif
%if %mpfr
#
# Install MPFR
#
cd $RPM_BUILD_DIR/KERNELGEN_MPFR_SNAP/build
KERNELGEN_FALLBACK=1 make install
%endif
%if %mpc
#
# Install MPC
#
cd $RPM_BUILD_DIR/KERNELGEN_MPC_SNAP/build
KERNELGEN_FALLBACK=1 make install
%endif
%if %libelf
#
# Install LibELF
#
cd $RPM_BUILD_DIR/KERNELGEN_LIBELF_SNAP/build
KERNELGEN_FALLBACK=1 make install
%endif
%if %gcc
#
# Install GCC
#
cd $RPM_BUILD_DIR/KERNELGEN_GCC_SNAP/build
CPLUS_INCLUDE_PATH=$RPM_BUILD_ROOT/%{prefix}/include:$RPM_BUILD_ROOT/%{prefix}/include/libelf KERNELGEN_FALLBACK=1 make install
%endif
%if %openmpi
#
# Install OpenMPI
#
cd $RPM_BUILD_DIR/openmpi/build
KERNELGEN_FALLBACK=1 make install -j%{njobs}
%endif
%if %netcdf
#
# Install NetCDF
#
cd $RPM_BUILD_DIR/KERNELGEN_NETCDF_SNAP/build
KERNELGEN_FALLBACK=1 make install -j%{njobs}
%endif
%if %glibc
#
# Install GLIBC
#
cd $RPM_BUILD_DIR/KERNELGEN_GLIBC_SNAP/build
KERNELGEN_FALLBACK=1 make install -j%{njobs}
%endif



#
# Remove ".la" files to fix libtool builds
#
find $RPM_BUILD_ROOT/%{prefix} -name "*.la" -exec rm -f '{}' \;



#
# Replace GCC's standard LTO wrapper with a symbolic link on kernelgen-simple.
#
%if %kernelgen
mkdir -p $RPM_BUILD_ROOT/%{prefix}/libexec/gcc/x86_64-unknown-linux-gnu/4.6.4
cd $RPM_BUILD_ROOT/%{prefix}/libexec/gcc/x86_64-unknown-linux-gnu/4.6.4
rm -rf lto-wrapper
ln -s ../../../../bin/kernelgen-simple lto-wrapper
%endif


#
# Remove some files from installation.
#
#
# LLVM
#
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangAnalysis.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libpollyanalysis.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMNVPTXInfo.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libgfortran.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMAsmPrinter.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMNVPTXAsmPrinter.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangFrontendTool.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangRewrite.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMAsmParser.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libopcodes.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libpollycodegen.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangARCMigrate.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libpollysupport.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangDriver.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libisl.so.9.0.0-gdb.py
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangEdit.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangParse.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMTransformUtils.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangSerialization.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMCore.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMRuntimeDyld.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangSema.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangStaticAnalyzerFrontend.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangLex.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMTableGen.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMMC.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangStaticAnalyzerCore.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMMCDisassembler.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMInstrumentation.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMX86Disassembler.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMX86CodeGen.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMNVPTXDesc.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangTooling.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangStaticAnalyzerCheckers.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMX86Info.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMBitWriter.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangFrontend.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclang.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangAST.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libgfortran.spec
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMNVPTXCodeGen.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMArchive.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLTO.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMBitReader.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libpollyjson.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMInterpreter.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMTarget.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMScalarOpts.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMObject.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMX86AsmPrinter.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMMCJIT.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMLinker.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMDebugInfo.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMExecutionEngine.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMX86AsmParser.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMX86Desc.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMipa.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libgomp.spec
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMX86Utils.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangBasic.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMVectorize.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/LLVMHello.so
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libclangCodeGen.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMSupport.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMCodeGen.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMInstCombine.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMMCParser.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libpollyexchange.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMAnalysis.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMipo.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMSelectionDAG.a
rm -rf $RPM_BUILD_ROOT/%{prefix}/lib/libLLVMJIT.a


#
# Final cleanup (off for fast repack).
#
%clean



#
# Files included into binary distribution.
#
%files
/opt/kernelgen/*



#
# Add paths for binaries and libraries into the system-wide configs.
#
%post
mkdir -p $RPM_INSTALL_PREFIX/etc/profile.d
mkdir -p $RPM_INSTALL_PREFIX/etc/ld.so.conf.d
echo "export PATH=\$PATH:$RPM_INSTALL_PREFIX/opt/kernelgen/usr/bin" >>$RPM_INSTALL_PREFIX/etc/profile.d/kernelgen.sh
echo "$RPM_INSTALL_PREFIX/opt/kernelgen/usr/lib" >>$RPM_INSTALL_PREFIX/etc/ld.so.conf.d/kernelgen.conf
echo "$RPM_INSTALL_PREFIX/opt/kernelgen/usr/lib64" >>$RPM_INSTALL_PREFIX/etc/ld.so.conf.d/kernelgen.conf
%if %kernelgen
sed -i s!$RPM_BUILD_ROOT!$RPM_INSTALL_PREFIX!g $RPM_INSTALL_PREFIX/opt/kernelgen/usr/bin/kernelgen-vars.sh
%endif

%changelog
* Sun Sep  2 2012 Dmitry Mikushin <maemarcus@gmail.com> 0.2
- added bundled CUDA-enabled OpenMPI
* Sat Jul 21 2012 Dmitry Mikushin <maemarcus@gmail.com> 0.2
- added locally installed binutils with gold for default linker
* Thu Jul 19 2012 Dmitry Mikushin <maemarcus@gmail.com> 0.2
- adopted 0.2 spec to use nvptx backend and automatic build bot
* Tue Sep 13 2011 Dmitry Mikushin <maemarcus@gmail.com> 0.2
- started preparing 0.2 "accurate" release
* Sun Jul 10 2011 Dmitry Mikushin <dmikushin@nvidia.com> 0.1
- initial release

