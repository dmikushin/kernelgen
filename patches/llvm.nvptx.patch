--- a/llvm/lib/MC/MCAsmStreamer.cpp	2012-10-19 01:21:57.160626454 +0200
+++ b/llvm/lib/MC/MCAsmStreamer.cpp	2012-10-19 01:23:11.088629695 +0200
@@ -451,8 +451,8 @@
   case MCSA_Protected:      OS << "\t.protected\t";       break;
   case MCSA_Reference:      OS << "\t.reference\t";       break;
   case MCSA_Weak:           OS << "\t.weak\t";            break;
-  case MCSA_WeakDefinition:
-    OS << "\t.weak_definition\t";
+  case MCSA_WeakDefinition: // .weak_definition
+    OS << MAI.getWeakDefDirective();
     FlagMap[Symbol] |= EHWeakDefinition;
     break;
       // .weak_reference
--- a/llvm/lib/Target/NVPTX/MCTargetDesc/NVPTXMCAsmInfo.cpp	2012-10-19 01:30:56.160650096 +0200
+++ b/llvm/lib/Target/NVPTX/MCTargetDesc/NVPTXMCAsmInfo.cpp	2012-10-19 01:18:55.828618499 +0200
@@ -60,4 +60,6 @@
 
   // @TODO: Can we just disable this?
   GlobalDirective = "\t// .globl\t";
+  AlignDirective = "\t// .align\t";
+  WeakDefDirective = "\t// .weak\t";
 }
--- a/llvm/lib/CodeGen/LexicalScopes.cpp	(revision 181135)
+++ b/llvm/lib/CodeGen/LexicalScopes.cpp	(working copy)
@@ -201,7 +201,8 @@
   if (Scope.isLexicalBlock()) {
     DILexicalBlock DB(N);
     DIDescriptor ParentDesc = DB.getContext();
-    Parent = getOrCreateAbstractScope(ParentDesc);
+    if (ParentDesc)
+      Parent = getOrCreateAbstractScope(ParentDesc);
   }
   AScope = new LexicalScope(Parent, DIDescriptor(N), NULL, true);
   AbstractScopeMap[N] = AScope;
--- a/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp	2013-07-14 01:33:25.000000000 +0200
+++ b/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp	2013-07-14 17:01:59.699241275 +0200
@@ -411,6 +412,15 @@
     emitGlobals(*MF->getFunction()->getParent());
     GlobalsEmitted = true;
   }
+
+  // Emit the global Fake Stack Object
+  const MachineFrameInfo *MFI = MF->getFrameInfo();
+  int NumBytes = (int) MFI->getStackSize();
+  if (NumBytes) {
+    O << ".visible .global .align " << MFI->getMaxAlignment() << " .b8 \t"
+        << DEPOTNAME
+        << getFunctionNumber() << "[" << NumBytes << "];\n\n";
+  }
   
   // Set up
   MRI = &MF->getRegInfo();
@@ -444,6 +454,12 @@
   raw_svector_ostream O(Str);
   emitDemotedVars(MF->getFunction(), O);
   OutStreamer.EmitRawText(O.str());
+
+  // For KernelGen main kernel - emit membar instructions,
+  // to be replaced by control code injection at CUBIN level.
+  if (CurrentFnSym->getName() == "__kernelgen_main")
+    for (int i = 0; i < 6; i++)
+      OutStreamer.EmitRawText(StringRef("\tmembar.sys;\n"));
 }
 
 void NVPTXAsmPrinter::EmitFunctionBodyEnd() {
@@ -1051,6 +1067,8 @@
 void NVPTXAsmPrinter::emitLinkageDirective(const GlobalValue *V,
                                            raw_ostream &O) {
   if (nvptxSubtarget.getDrvInterface() == NVPTX::CUDA) {
+    if (V->hasWeakLinkage() || V->hasLinkOnceLinkage())
+      O << ".weak ";
     if (V->hasExternalLinkage()) {
       if (isa<GlobalVariable>(V)) {
         const GlobalVariable *GVar = cast<GlobalVariable>(V);
@@ -1224,6 +1242,7 @@
     // Ptx allows variable initilization only for constant and global state
     // spaces.
     if (((PTy->getAddressSpace() == llvm::ADDRESS_SPACE_GLOBAL) ||
+         (PTy->getAddressSpace() == llvm::ADDRESS_SPACE_GENERIC) ||
          (PTy->getAddressSpace() == llvm::ADDRESS_SPACE_CONST)) &&
         GVar->hasInitializer()) {
       const Constant *Initializer = GVar->getInitializer();
@@ -1247,6 +1266,7 @@
       // Ptx allows variable initilization only for constant and
       // global state spaces.
       if (((PTy->getAddressSpace() == llvm::ADDRESS_SPACE_GLOBAL) ||
+           (PTy->getAddressSpace() == llvm::ADDRESS_SPACE_GENERIC) ||
            (PTy->getAddressSpace() == llvm::ADDRESS_SPACE_CONST)) &&
           GVar->hasInitializer()) {
         const Constant *Initializer = GVar->getInitializer();
@@ -1314,6 +1334,7 @@
     O << "local";
     break;
   case llvm::ADDRESS_SPACE_GLOBAL:
+  case llvm::ADDRESS_SPACE_GENERIC:
     O << "global";
     break;
   case llvm::ADDRESS_SPACE_CONST:
@@ -1676,8 +1697,6 @@
   const MachineFrameInfo *MFI = MF.getFrameInfo();
   int NumBytes = (int) MFI->getStackSize();
   if (NumBytes) {
-    O << "\t.local .align " << MFI->getMaxAlignment() << " .b8 \t" << DEPOTNAME
-      << getFunctionNumber() << "[" << NumBytes << "];\n";
     if (nvptxSubtarget.is64Bit()) {
       O << "\t.reg .b64 \t%SP;\n";
       O << "\t.reg .b64 \t%SPL;\n";
--- a/llvm/lib/Target/NVPTX/NVPTXFrameLowering.cpp	(revision 192159)
+++ b/llvm/lib/Target/NVPTX/NVPTXFrameLowering.cpp	(working copy)
@@ -41,17 +41,28 @@
 
     // mov %SPL, %depot;
     // cvta.local %SP, %SPL;
+    // or
+    // cvta.global %SP, %SPL;
+    // TODO: allow loop kernels to use local memory
     if (is64bit) {
       unsigned LocalReg = MRI.createVirtualRegister(&NVPTX::Int64RegsRegClass);
       MachineInstr *MI = BuildMI(
+#if 0 
           MBB, MBBI, dl, tm.getInstrInfo()->get(NVPTX::cvta_local_yes_64),
+#else
+          MBB, MBBI, dl, tm.getInstrInfo()->get(NVPTX::cvta_global_yes_64),
+#endif
           NVPTX::VRFrame).addReg(LocalReg);
       BuildMI(MBB, MI, dl, tm.getInstrInfo()->get(NVPTX::MOV_DEPOT_ADDR_64),
               LocalReg).addImm(MF.getFunctionNumber());
     } else {
       unsigned LocalReg = MRI.createVirtualRegister(&NVPTX::Int32RegsRegClass);
       MachineInstr *MI = BuildMI(
+#if 0
           MBB, MBBI, dl, tm.getInstrInfo()->get(NVPTX::cvta_local_yes),
+#else
+          MBB, MBBI, dl, tm.getInstrInfo()->get(NVPTX::cvta_global_yes),
+#endif
           NVPTX::VRFrame).addReg(LocalReg);
       BuildMI(MBB, MI, dl, tm.getInstrInfo()->get(NVPTX::MOV_DEPOT_ADDR),
               LocalReg).addImm(MF.getFunctionNumber());
--- a/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp	(revision 192159)
+++ b/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp	(working copy)
@@ -237,6 +237,10 @@
   setOperationAction(ISD::CTPOP, MVT::i32, Legal);
   setOperationAction(ISD::CTPOP, MVT::i64, Legal);
 
+  // Dummy custom expansion of stack save/restore
+  setOperationAction(ISD::STACKSAVE, MVT::Other, Custom);
+  setOperationAction(ISD::STACKRESTORE, MVT::Other, Custom);
+
   // Now deduce the information based on the above mentioned
   // actions
   computeRegisterProperties();
@@ -1153,6 +1157,9 @@
     return LowerSTORE(Op, DAG);
   case ISD::LOAD:
     return LowerLOAD(Op, DAG);
+  case ISD::STACKSAVE:
+  case ISD::STACKRESTORE:
+    return SDValue();
   default:
     llvm_unreachable("Custom lowering not defined for operation");
   }
