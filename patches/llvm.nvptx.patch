--- a/llvm/lib/MC/MCAsmStreamer.cpp	2012-10-19 01:21:57.160626454 +0200
+++ b/llvm/lib/MC/MCAsmStreamer.cpp	2012-10-19 01:23:11.088629695 +0200
@@ -451,8 +451,8 @@
   case MCSA_Protected:      OS << "\t.protected\t";       break;
   case MCSA_Reference:      OS << "\t.reference\t";       break;
   case MCSA_Weak:           OS << "\t.weak\t";            break;
-  case MCSA_WeakDefinition:
-    OS << "\t.weak_definition\t";
+  case MCSA_WeakDefinition: // .weak_definition
+    OS << MAI.getWeakDefDirective();
     FlagMap[Symbol] |= EHWeakDefinition;
     break;
       // .weak_reference
--- a/llvm/lib/Target/NVPTX/MCTargetDesc/NVPTXMCAsmInfo.cpp	2012-10-19 01:30:56.160650096 +0200
+++ b/llvm/lib/Target/NVPTX/MCTargetDesc/NVPTXMCAsmInfo.cpp	2012-10-19 01:18:55.828618499 +0200
@@ -60,4 +60,6 @@
 
   // @TODO: Can we just disable this?
   GlobalDirective = "\t// .globl\t";
+  AlignDirective = "\t// .align\t";
+  WeakDefDirective = "\t// .weak\t";
 }
--- a/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp	2012-07-19 23:56:25.000000000 +0400
+++ b/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp	2012-07-20 14:52:35.000000000 +0400
@@ -369,9 +369,19 @@
   SmallString<128> Str;
   raw_svector_ostream O(Str);
 
+  // Emit the global Fake Stack Object
+  const MachineFrameInfo *MFI = MF->getFrameInfo();
+  int NumBytes = (int) MFI->getStackSize();
+  if (NumBytes) {
+    O << ".visible .global .align " << MFI->getMaxAlignment() << " .b8 \t"
+        << DEPOTNAME
+        << getFunctionNumber() << "[" << NumBytes << "];\n\n";
+  }
+
   // Set up
   MRI = &MF->getRegInfo();
   F = MF->getFunction();
+
   emitLinkageDirective(F,O);
   if (llvm::isKernelFunction(*F))
     O << ".entry ";
@@ -897,9 +907,10 @@
   emitDeclarations(M, OS2);
 
   // Print out module-level global variables here.
+  SmallVector<GlobalVariable*, 16> emitted;
   for (Module::global_iterator I = M.global_begin(), E = M.global_end();
       I != E; ++I)
-    printModuleLevelGV(I, OS2);
+    printModuleLevelGV((GlobalVariable*)I, OS2, false, &emitted);
 
   OS2 << '\n';
 
@@ -913,7 +924,7 @@
   O << "//\n";
   O << "\n";
 
-  O << ".version 3.0\n";
+  O << ".version 3.1\n";
 
   O << ".target ";
   O << nvptxSubtarget.getTargetName();
@@ -991,6 +1002,8 @@
 void NVPTXAsmPrinter::emitLinkageDirective(const GlobalValue* V, raw_ostream &O)
 {
   if (nvptxSubtarget.getDrvInterface() == NVPTX::CUDA) {
+    if (V->hasWeakLinkage() || V->hasLinkOnceLinkage())
+      O << ".weak ";
     if (V->hasExternalLinkage()) {
       if (isa<GlobalVariable>(V)) {
         const GlobalVariable *GVar = cast<GlobalVariable>(V);
@@ -1143,6 +1210,7 @@
     // Ptx allows variable initilization only for constant and global state
     // spaces.
     if (((PTy->getAddressSpace() == llvm::ADDRESS_SPACE_GLOBAL) ||
+        (PTy->getAddressSpace() == llvm::ADDRESS_SPACE_GENERIC) ||
         (PTy->getAddressSpace() == llvm::ADDRESS_SPACE_CONST_NOT_GEN) ||
         (PTy->getAddressSpace() == llvm::ADDRESS_SPACE_CONST))
         && GVar->hasInitializer()) {
@@ -1167,6 +1235,7 @@
       // Ptx allows variable initilization only for constant and
       // global state spaces.
       if (((PTy->getAddressSpace() == llvm::ADDRESS_SPACE_GLOBAL) ||
+          (PTy->getAddressSpace() == llvm::ADDRESS_SPACE_GENERIC) ||
           (PTy->getAddressSpace() == llvm::ADDRESS_SPACE_CONST_NOT_GEN) ||
           (PTy->getAddressSpace() == llvm::ADDRESS_SPACE_CONST))
           && GVar->hasInitializer()) {
@@ -1239,6 +1308,7 @@
   case llvm::ADDRESS_SPACE_LOCAL:
     O << "local" ;
     break;
+  case llvm::ADDRESS_SPACE_GENERIC:
   case llvm::ADDRESS_SPACE_GLOBAL:
     O << "global" ;
     break;
@@ -1588,9 +1658,6 @@
   const MachineFrameInfo *MFI = MF.getFrameInfo();
   int NumBytes = (int) MFI->getStackSize();
   if (NumBytes) {
-    O << "\t.local .align " << MFI->getMaxAlignment() << " .b8 \t"
-        << DEPOTNAME
-        << getFunctionNumber() << "[" << NumBytes << "];\n";
     if (nvptxSubtarget.is64Bit()) {
       O << "\t.reg .b64 \t%SP;\n";
       O << "\t.reg .b64 \t%SPL;\n";
@@ -1825,17 +1892,15 @@
   case Type::ArrayTyID:
   case Type::VectorTyID:
   case Type::StructTyID: {
-    if (isa<ConstantArray>(CPV) || isa<ConstantVector>(CPV) ||
-        isa<ConstantStruct>(CPV)) {
+    if (isa<ConstantAggregateZero>(CPV))
+      aggBuffer->addZeros(Bytes);
+    else
+    {
       int ElementSize = TD->getTypeAllocSize(CPV->getType());
       bufferAggregateConstant(CPV, aggBuffer);
       if ( Bytes > ElementSize )
         aggBuffer->addZeros(Bytes-ElementSize);
     }
-    else if (isa<ConstantAggregateZero>(CPV))
-      aggBuffer->addZeros(Bytes);
-    else
-      llvm_unreachable("Unexpected Constant type");
     break;
   }
 
--- a/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp	2012-12-06 09:02:34.348722278 +0100
+++ b/llvm/lib/Target/NVPTX/NVPTXAsmPrinter.cpp	2012-12-06 17:35:15.509997563 +0100
@@ -413,6 +413,12 @@
   raw_svector_ostream O(Str);
   emitDemotedVars(MF->getFunction(), O);
   OutStreamer.EmitRawText(O.str());
+
+  // For KernelGen main kernel - emit membar instructions,
+  // to be replaced by control code injection at CUBIN level.
+  if (CurrentFnSym->getName() == "__kernelgen_main")
+    for (int i = 0; i < 6; i++)
+      OutStreamer.EmitRawText(StringRef("\tmembar.sys;\n"));
 }
 
 void NVPTXAsmPrinter::EmitFunctionBodyEnd() {
--- a/llvm/lib/Target/NVPTX/NVPTXFrameLowering.cpp	(revision 181135)
+++ b/llvm/lib/Target/NVPTX/NVPTXFrameLowering.cpp	(working copy)
@@ -39,15 +39,26 @@
     if (tm.getSubtargetImpl()->hasGenericLdSt()) {
       // mov %SPL, %depot;
       // cvta.local %SP, %SPL;
+      // or
+      // cvta.global %SP, %SPL;
+      // TODO: allow loop kernels to use local memory
       if (is64bit) {
         MachineInstr *MI = BuildMI(
+#if 0
             MBB, MBBI, dl, tm.getInstrInfo()->get(NVPTX::cvta_local_yes_64),
+#else
+            MBB, MBBI, dl, tm.getInstrInfo()->get(NVPTX::cvta_global_yes_64),
+#endif
             NVPTX::VRFrame).addReg(NVPTX::VRFrameLocal);
         BuildMI(MBB, MI, dl, tm.getInstrInfo()->get(NVPTX::IMOV64rr),
                 NVPTX::VRFrameLocal).addReg(NVPTX::VRDepot);
       } else {
         MachineInstr *MI = BuildMI(
+#if 0
             MBB, MBBI, dl, tm.getInstrInfo()->get(NVPTX::cvta_local_yes),
+#else
+            MBB, MBBI, dl, tm.getInstrInfo()->get(NVPTX::cvta_global_yes),
+#endif
             NVPTX::VRFrame).addReg(NVPTX::VRFrameLocal);
         BuildMI(MBB, MI, dl, tm.getInstrInfo()->get(NVPTX::IMOV32rr),
                 NVPTX::VRFrameLocal).addReg(NVPTX::VRDepot);
--- a/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp	(revision 181135)
+++ b/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp	(working copy)
@@ -181,6 +181,10 @@
     }
   }
 
+  // Dummy custom expansion of stack save/restore
+  setOperationAction(ISD::STACKSAVE, MVT::Other, Custom);
+  setOperationAction(ISD::STACKRESTORE, MVT::Other, Custom);
+
   // Now deduce the information based on the above mentioned
   // actions
   computeRegisterProperties();
@@ -847,6 +851,9 @@
     return LowerSTORE(Op, DAG);
   case ISD::LOAD:
     return LowerLOAD(Op, DAG);
+  case ISD::STACKSAVE:
+  case ISD::STACKRESTORE:
+    return SDValue();
   default:
     llvm_unreachable("Custom lowering not defined for operation");
   }
