--- a/dragonegg/src/Backend.cpp	(revision 181135)
+++ b/dragonegg/src/Backend.cpp	(working copy)
@@ -102,6 +102,8 @@
 
 using namespace llvm;
 
+extern std::string dragonegg_result;
+
 // Non-zero if libcalls should not be simplified.
 int flag_no_simplify_libcalls;
 
@@ -138,6 +140,7 @@
 static bool EmitIR;
 static bool EmitObj;
 static bool SaveGCCOutput;
+static bool InternalOutput;
 static int LLVMCodeGenOptimizeArg = -1;
 static int LLVMIROptimizeArg = -1;
 
@@ -623,8 +626,14 @@
   assert(!OutStream && "Output stream already initialized!");
   std::string Error;
 
-  OutStream = new raw_fd_ostream(llvm_asm_file_name, Error,
-                                 Binary ? raw_fd_ostream::F_Binary : 0);
+  if (InternalOutput) {
+    // Write to internal array (to interface with other plugins).
+    OutStream = new raw_string_ostream(dragonegg_result);
+  } else {
+    // Write to file.
+    OutStream = new raw_fd_ostream(llvm_asm_file_name, Error,
+                                   Binary ? raw_fd_ostream::F_Binary : 0);
+  }
 
   if (!Error.empty())
     report_fatal_error(Error);
@@ -2036,9 +2045,12 @@
 static FlagDescriptor PluginFlags[] = {
   { "debug-pass-structure", &DebugPassStructure },
   { "debug-pass-arguments", &DebugPassArguments },
-  { "enable-gcc-optzns", &EnableGCCOptimizations }, { "emit-ir", &EmitIR },
+  { "enable-gcc-optzns", &EnableGCCOptimizations },
+  { "emit-ir", &EmitIR },
   { "emit-obj", &EmitObj },
-  { "save-gcc-output", &SaveGCCOutput }, { NULL, NULL } // Terminator.
+  { "save-gcc-output", &SaveGCCOutput },
+  { "internal-output", &InternalOutput },
+  { NULL, NULL } // Terminator.
 };
 
 /// llvm_plugin_info - Information about this plugin.  Users can access this
--- a/dragonegg/src/Convert.cpp	2013-07-14 01:34:15.000000000 +0200
+++ b/dragonegg/src/Convert.cpp	2013-07-14 17:56:06.451375879 +0200
@@ -4475,11 +4475,13 @@
   case BUILT_IN_POWI:
   case BUILT_IN_POWIF:
   case BUILT_IN_POWIL:
+    break;
     Result = EmitBuiltinPOWI(stmt);
     return true;
   case BUILT_IN_POW:
   case BUILT_IN_POWF:
   case BUILT_IN_POWL:
+    break;
     // If errno math has been disabled, expand these to llvm.pow calls.
     if (!flag_errno_math) {
       Result = EmitBuiltinPOW(stmt);
@@ -4489,6 +4491,7 @@
   case BUILT_IN_LOG:
   case BUILT_IN_LOGF:
   case BUILT_IN_LOGL:
+    break;
     // If errno math has been disabled, expand these to llvm.log calls.
     if (!flag_errno_math) {
       Value *Amt = EmitMemory(gimple_call_arg(stmt, 0));
@@ -4500,6 +4503,7 @@
   case BUILT_IN_LOG2:
   case BUILT_IN_LOG2F:
   case BUILT_IN_LOG2L:
+    break;
     // If errno math has been disabled, expand these to llvm.log2 calls.
     if (!flag_errno_math) {
       Value *Amt = EmitMemory(gimple_call_arg(stmt, 0));
@@ -4511,6 +4515,7 @@
   case BUILT_IN_LOG10:
   case BUILT_IN_LOG10F:
   case BUILT_IN_LOG10L:
+    break;
     // If errno math has been disabled, expand these to llvm.log10 calls.
     if (!flag_errno_math) {
       Value *Amt = EmitMemory(gimple_call_arg(stmt, 0));
@@ -4522,6 +4527,7 @@
   case BUILT_IN_EXP:
   case BUILT_IN_EXPF:
   case BUILT_IN_EXPL:
+    break;
     // If errno math has been disabled, expand these to llvm.exp calls.
     if (!flag_errno_math) {
       Value *Amt = EmitMemory(gimple_call_arg(stmt, 0));
@@ -4533,6 +4539,7 @@
   case BUILT_IN_EXP2:
   case BUILT_IN_EXP2F:
   case BUILT_IN_EXP2L:
+    break;
     // If errno math has been disabled, expand these to llvm.exp2 calls.
     if (!flag_errno_math) {
       Value *Amt = EmitMemory(gimple_call_arg(stmt, 0));
@@ -4570,6 +4577,7 @@
   case BUILT_IN_LLCEIL:
   case BUILT_IN_LLCEILF:
   case BUILT_IN_LLCEILL:
+    break;
     Result = EmitBuiltinLCEIL(stmt);
     return true;
 #if (GCC_MINOR > 6)
@@ -4583,6 +4591,7 @@
   case BUILT_IN_LLFLOOR:
   case BUILT_IN_LLFLOORF:
   case BUILT_IN_LLFLOORL:
+    break;
     Result = EmitBuiltinLFLOOR(stmt);
     return true;
 #if (GCC_MINOR > 6)
@@ -4598,6 +4607,7 @@
   case BUILT_IN_CEXPI:
   case BUILT_IN_CEXPIF:
   case BUILT_IN_CEXPIL:
+    break;
     Result = EmitBuiltinCEXPI(stmt);
     return true;
     //TODO  case BUILT_IN_FLT_ROUNDS: {
