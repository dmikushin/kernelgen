--- a/dragonegg/src/Backend.cpp	2012-03-08 19:03:33.178648662 +0300
+++ b/dragonegg/src/Backend.cpp	2012-03-08 19:17:32.124873204 +0300
@@ -84,6 +84,8 @@
 #error Unsupported GCC major version
 #endif
 
+extern std::string dragonegg_result;
+
 // Non-zero if libcalls should not be simplified.
 int flag_no_simplify_libcalls;
 
@@ -116,6 +118,7 @@
 static bool EnableGCCOptimizations;
 static bool EmitIR;
 static bool SaveGCCOutput;
+static bool InternalOutput;
 static int LLVMCodeGenOptimizeArg = -1;
 static int LLVMIROptimizeArg = -1;
 
@@ -586,8 +589,14 @@
   assert(!OutStream && "Output stream already initialized!");
   std::string Error;
 
-  OutStream = new raw_fd_ostream(llvm_asm_file_name, Error,
-                                 Binary ? raw_fd_ostream::F_Binary : 0);
+  if (InternalOutput) {
+    // Write to internal array (to interface with other plugins).
+    OutStream = new raw_string_ostream(dragonegg_result);
+  } else {
+    // Write to file.
+    OutStream = new raw_fd_ostream(llvm_asm_file_name, Error,
+                                   Binary ? raw_fd_ostream::F_Binary : 0);
+  }
 
   if (!Error.empty())
     report_fatal_error(Error);
@@ -2018,6 +2027,7 @@
     { "enable-gcc-optzns", &EnableGCCOptimizations },
     { "emit-ir", &EmitIR },
     { "save-gcc-output", &SaveGCCOutput },
+    { "internal-output", &InternalOutput },
     { NULL, NULL } // Terminator.
 };

--- a/dragonegg/src/Convert.cpp	2012-09-06 19:33:07.362601226 +0200
+++ b/dragonegg/src/Convert.cpp	2012-09-06 19:33:48.630599469 +0200
@@ -4362,11 +4359,13 @@
   case BUILT_IN_POWI:
   case BUILT_IN_POWIF:
   case BUILT_IN_POWIL:
+    break;
     Result = EmitBuiltinPOWI(stmt);
     return true;
   case BUILT_IN_POW:
   case BUILT_IN_POWF:
   case BUILT_IN_POWL:
+    break;
     // If errno math has been disabled, expand these to llvm.pow calls.
     if (!flag_errno_math) {
       Result = EmitBuiltinPOW(stmt);
@@ -4376,6 +4375,7 @@
   case BUILT_IN_LOG:
   case BUILT_IN_LOGF:
   case BUILT_IN_LOGL:
+    break;
     // If errno math has been disabled, expand these to llvm.log calls.
     if (!flag_errno_math) {
       Value *Amt = EmitMemory(gimple_call_arg(stmt, 0));
@@ -4387,6 +4387,7 @@
   case BUILT_IN_LOG2:
   case BUILT_IN_LOG2F:
   case BUILT_IN_LOG2L:
+    break;
     // If errno math has been disabled, expand these to llvm.log2 calls.
     if (!flag_errno_math) {
       Value *Amt = EmitMemory(gimple_call_arg(stmt, 0));
@@ -4398,6 +4399,7 @@
   case BUILT_IN_LOG10:
   case BUILT_IN_LOG10F:
   case BUILT_IN_LOG10L:
+    break;
     // If errno math has been disabled, expand these to llvm.log10 calls.
     if (!flag_errno_math) {
       Value *Amt = EmitMemory(gimple_call_arg(stmt, 0));
@@ -4409,6 +4411,7 @@
   case BUILT_IN_EXP:
   case BUILT_IN_EXPF:
   case BUILT_IN_EXPL:
+    break;
     // If errno math has been disabled, expand these to llvm.exp calls.
     if (!flag_errno_math) {
       Value *Amt = EmitMemory(gimple_call_arg(stmt, 0));
@@ -4420,6 +4423,7 @@
   case BUILT_IN_EXP2:
   case BUILT_IN_EXP2F:
   case BUILT_IN_EXP2L:
+    break;
     // If errno math has been disabled, expand these to llvm.exp2 calls.
     if (!flag_errno_math) {
       Value *Amt = EmitMemory(gimple_call_arg(stmt, 0));
@@ -4456,6 +4460,7 @@
   case BUILT_IN_LLCEIL:
   case BUILT_IN_LLCEILF:
   case BUILT_IN_LLCEILL:
+    break;
     Result = EmitBuiltinLCEIL(stmt);
     return true;
   case BUILT_IN_LFLOOR:
@@ -4464,11 +4469,13 @@
   case BUILT_IN_LLFLOOR:
   case BUILT_IN_LLFLOORF:
   case BUILT_IN_LLFLOORL:
+    break;
     Result = EmitBuiltinLFLOOR(stmt);
     return true;
   case BUILT_IN_CEXPI:
   case BUILT_IN_CEXPIF:
   case BUILT_IN_CEXPIL:
+    break;
     Result = EmitBuiltinCEXPI(stmt);
     return true;
 //TODO  case BUILT_IN_FLT_ROUNDS: {
--- a/dragonegg/src/Backend.cpp	2011-12-03 22:18:52.608602111 +0300
+++ b/dragonegg/src/Backend.cpp	2011-12-03 22:15:36.923775409 +0300
@@ -444,7 +445,7 @@
   // Insert a special .ident directive to identify the version of the plugin
   // which compiled this code.  The format of the .ident string is patterned
   // after the ones produced by GCC.
-#ifdef IDENT_ASM_OP
+#if defined(IDENT_ASM_OP) && !defined(NO_IDENT_ASM_OP)
   if (!flag_no_ident) {
     const char *pkg_version = "(GNU) ";
 
--- a/dragonegg/Makefile	2011-12-03 22:18:14.424415511 +0300
+++ b/dragonegg/Makefile	2011-12-03 22:17:11.337764114 +0300
@@ -63,7 +63,7 @@
 	     -MD -MP \
 	     -DIN_GCC -DLLVM_VERSION=\"$(LLVM_VERSION)\" \
 	     -DGCC_MAJOR=$(GCC_MAJOR) -DGCC_MINOR=$(GCC_MINOR) \
-	     -DGCC_MICRO=$(GCC_MICRO) \
+	     -DGCC_MICRO=$(GCC_MICRO) -DNO_IDENT_ASM_OP \
 	     -I$(INCLUDE_DIR) -isystem$(GCC_PLUGIN_DIR)/include
 ifdef DISABLE_VERSION_CHECK
 CPP_OPTIONS+=-DDISABLE_VERSION_CHECK
