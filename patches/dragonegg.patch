--- a/dragonegg/src/Backend.cpp	2012-03-08 19:03:33.178648662 +0300
+++ b/dragonegg/src/Backend.cpp	2012-03-08 19:17:32.124873204 +0300
@@ -84,6 +84,8 @@
 #error Unsupported GCC major version
 #endif
 
+extern std::string dragonegg_result;
+
 // Non-zero if libcalls should not be simplified.
 int flag_no_simplify_libcalls;
 
@@ -116,6 +118,7 @@
 static bool EnableGCCOptimizations;
 static bool EmitIR;
 static bool SaveGCCOutput;
+static bool InternalOutput;
 static int LLVMCodeGenOptimizeArg = -1;
 static int LLVMIROptimizeArg = -1;
 
@@ -586,8 +589,14 @@
   assert(!OutStream && "Output stream already initialized!");
   std::string Error;
 
-  OutStream = new raw_fd_ostream(llvm_asm_file_name, Error,
-                                 Binary ? raw_fd_ostream::F_Binary : 0);
+  if (InternalOutput) {
+    // Write to internal array (to interface with other plugins).
+    OutStream = new raw_string_ostream(dragonegg_result);
+  } else {
+    // Write to file.
+    OutStream = new raw_fd_ostream(llvm_asm_file_name, Error,
+                                   Binary ? raw_fd_ostream::F_Binary : 0);
+  }
 
   if (!Error.empty())
     report_fatal_error(Error);
@@ -2018,6 +2027,7 @@
     { "enable-gcc-optzns", &EnableGCCOptimizations },
     { "emit-ir", &EmitIR },
     { "save-gcc-output", &SaveGCCOutput },
+    { "internal-output", &InternalOutput },
     { NULL, NULL } // Terminator.
 };

--- a/dragonegg/src/Convert.cpp	2012-09-06 19:33:07.362601226 +0200
+++ b/dragonegg/src/Convert.cpp	2012-09-06 19:33:48.630599469 +0200
@@ -4150,6 +4150,9 @@
 /// If we can't handle the builtin, return false, otherwise return true.
 bool TreeToLLVM::EmitBuiltinCall(gimple stmt, tree fndecl,
                                  const MemRef *DestLoc, Value *&Result) {
+  // Do not emit any builtin calls.
+  return false;
+
   if (DECL_BUILT_IN_CLASS(fndecl) == BUILT_IN_MD) {
     unsigned FnCode = DECL_FUNCTION_CODE(fndecl);
     if (TargetBuiltinCache.size() <= FnCode)
