--- a/llvm/tools/clang/lib/CodeGen/TargetInfo.cpp	(revision 181135)
+++ b/llvm/tools/clang/lib/CodeGen/TargetInfo.cpp	(working copy)
@@ -4059,7 +4059,25 @@
   if (FI.getCallingConvention() != llvm::CallingConv::C)
     return;
 
-  FI.setEffectiveCallingConvention(getRuntimeCC());
+  // Calling convention as default by an ABI.
+  // We're still using the PTX_Kernel/PTX_Device calling conventions here,
+  // but we should switch to NVVM metadata later on.
+  llvm::CallingConv::ID DefaultCC;
+  const LangOptions &LangOpts = getContext().getLangOpts();
+  if (LangOpts.OpenCL || LangOpts.CUDA) {
+    // If we are in OpenCL or CUDA mode, then default to device functions
+    DefaultCC = llvm::CallingConv::PTX_Device;
+  } else {
+    // If we are in standard C/C++ mode, use the triple to decide on the default
+    StringRef Env =
+      getContext().getTargetInfo().getTriple().getEnvironmentName();
+    if (Env == "device")
+      DefaultCC = llvm::CallingConv::PTX_Device;
+    else
+      DefaultCC = llvm::CallingConv::PTX_Kernel;
+  }
+  FI.setEffectiveCallingConvention(DefaultCC);
+  //FI.setEffectiveCallingConvention(getRuntimeCC());
 }
 
 llvm::Value *NVPTXABIInfo::EmitVAArg(llvm::Value *VAListAddr, QualType Ty,
--- a/llvm/tools/clang/lib/AST/ASTContext.cpp	(revision 182229)
+++ b/llvm/tools/clang/lib/AST/ASTContext.cpp	(working copy)
@@ -7789,6 +7789,8 @@
 }
 
 GVALinkage ASTContext::GetGVALinkageForFunction(const FunctionDecl *FD) {
+  return GVA_StrongExternal;
+
   if (!FD->isExternallyVisible())
     return GVA_Internal;
 
