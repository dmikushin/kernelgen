--- a/gcc-snapshot/gcc/gcc.c
+++ b/gcc-snapshot/gcc/gcc.c
@@ -3925,6 +3925,27 @@
       add_infile ("help-dummy", "c");
     }
 
+  /* For KernelGen without fallback always add -fuse-linker-plugin,  
+     except if KERNELGEN_OLD_LINKER is given.  */
+  const char* cfallback = getenv("KERNELGEN_FALLBACK");
+  int fallback = 0;
+  if (cfallback) {
+    fallback = atoi(cfallback);
+  }
+  cfallback = getenv("KERNELGEN_OLD_LINKER");
+  if (cfallback) {
+    fallback = fallback || atoi(cfallback);
+  }
+  if (!fallback) {
+    alloc_switch ();
+    switches[n_switches].part1 = "fuse-linker-plugin";
+    switches[n_switches].args = 0;
+    switches[n_switches].live_cond = 0;
+    switches[n_switches].validated = 0;
+    switches[n_switches].ordering = 0;
+    n_switches++;
+  }
+
   alloc_switch ();
   switches[n_switches].part1 = 0;
   alloc_infile ();
--- a/gcc-snapshot/gcc/tlink.c	2010-11-29 17:09:41.000000000 +0300
+++ a/gcc-snapshot/gcc/tlink.c	2015-10-01 18:47:58.000000000 +0400
@@ -765,6 +765,18 @@
 void
 do_tlink (char **ld_argv, char **object_lst ATTRIBUTE_UNUSED)
 {
+  if (tlink_verbose && ld_argv)
+  {
+    fprintf(stderr, _("ld command: "));
+    int i = 0;
+    while (ld_argv[i])
+    {
+      fprintf(stderr, "%s ", ld_argv[i]);
+      i++;
+    }
+    fprintf(stderr, "\n");
+  }
+
   int exit = tlink_execute ("ld", ld_argv, ldout, lderrout);
 
   tlink_init ();
