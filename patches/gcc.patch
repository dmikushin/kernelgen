--- a/gcc-snapshot/gcc/gcc.c
+++ b/gcc-snapshot/gcc/gcc.c
@@ -3925,6 +3925,27 @@
       add_infile ("help-dummy", "c");
     }
 
+  /* For KernelGen without fallback always add -flto,  
+     except if KERNELGEN_OLD_LINKER is given.  */
+  const char* cfallback = getenv("KERNELGEN_FALLBACK");
+  int fallback = 0;
+  if (cfallback) {
+    fallback = atoi(cfallback);
+  }
+  cfallback = getenv("KERNELGEN_OLD_LINKER");
+  if (cfallback) {
+    fallback = fallback || atoi(cfallback);
+  }
+  if (!fallback) {
+    alloc_switch ();
+    switches[n_switches].part1 = "flto";
+    switches[n_switches].args = 0;
+    switches[n_switches].live_cond = 0;
+    switches[n_switches].validated = true;
+    switches[n_switches].ordering = 0;
+    n_switches++;
+  }
+
   alloc_switch ();
   switches[n_switches].part1 = 0;
   alloc_infile ();
--- a/gcc-snapshot/lto-plugin/lto-plugin.c	2015-10-02 01:59:07.000000000 +0400
+++ b/gcc-snapshot/lto-plugin/lto-plugin.c	2015-10-02 02:09:17.000000000 +0400
@@ -549,22 +549,22 @@
     }
 
 
-  pex = pex_init (PEX_USE_PIPES, "lto-wrapper", NULL);
-  check (pex != NULL, LDPL_FATAL, "could not pex_init lto-wrapper");
+  pex = pex_init (PEX_USE_PIPES, "kernelgen-simple", NULL);
+  check (pex != NULL, LDPL_FATAL, "could not pex_init kernelgen-simple");
 
   errmsg = pex_run (pex, 0, new_argv[0], new_argv, NULL, NULL, &t);
-  check (errmsg == NULL, LDPL_FATAL, "could not run lto-wrapper");
-  check (t == 0, LDPL_FATAL, "could not run lto-wrapper");
+  check (errmsg == NULL, LDPL_FATAL, "could not run kernegen-simple");
+  check (t == 0, LDPL_FATAL, "could not run kernelgen-simple");
 
   wrapper_output = pex_read_output (pex, 0);
-  check (wrapper_output, LDPL_FATAL, "could not read lto-wrapper output");
+  check (wrapper_output, LDPL_FATAL, "could not read kernelgen-simple output");
 
   add_output_files (wrapper_output);
 
   t = pex_get_status (pex, 1, &status);
-  check (t == 1, LDPL_FATAL, "could not get lto-wrapper exit status");
+  check (t == 1, LDPL_FATAL, "could not get kernelgen-simple exit status");
   check (WIFEXITED (status) && WEXITSTATUS (status) == 0, LDPL_FATAL,
-         "lto-wrapper failed");
+         "kernelgen-simple failed");
 
   pex_free (pex);

@@ -603,8 +603,16 @@
 static enum ld_plugin_status
 all_symbols_read_handler (void)
 {
+  const char* cfallback = getenv("KERNELGEN_FALLBACK");
+  int fallback = 0;
+  if (cfallback) {
+    fallback = atoi(cfallback);
+  }
+
   unsigned i;
   unsigned num_lto_args = num_claimed_files + lto_wrapper_num_args + 1;
+  if (!fallback)
+    num_lto_args = num_claimed_files + 2;
   char **lto_argv;
   const char **lto_arg_ptr;
   if (num_claimed_files == 0)
@@ -624,8 +632,13 @@

   free_1 ();

-  for (i = 0; i < lto_wrapper_num_args; i++)
-    *lto_arg_ptr++ = lto_wrapper_argv[i];
+  if (fallback) {
+    for (i = 0; i < lto_wrapper_num_args; i++)
+      *lto_arg_ptr++ = lto_wrapper_argv[i];
+  } else {
+    if (lto_wrapper_num_args > 0)
+      *lto_arg_ptr++ = lto_wrapper_argv[0];
+  }

   for (i = 0; i < num_claimed_files; i++)
     {
--- a/gcc-snapshot/gcc/tlink.c	2010-11-29 17:09:41.000000000 +0300
+++ b/gcc-snapshot/gcc/tlink.c	2015-10-01 18:47:58.000000000 +0400
@@ -765,6 +765,18 @@
 void
 do_tlink (char **ld_argv, char **object_lst ATTRIBUTE_UNUSED)
 {
+  if (tlink_verbose && ld_argv)
+  {
+    fprintf(stderr, _("ld command: "));
+    int i = 0;
+    while (ld_argv[i])
+    {
+      fprintf(stderr, "%s ", ld_argv[i]);
+      i++;
+    }
+    fprintf(stderr, "\n");
+  }
+
   int ret = tlink_execute ("ld", ld_argv, ldout, lderrout);
 
   tlink_init ();
--- a/gcc-snapshot/gcc/toplev.c	2012-03-25 16:59:48.910888752 +0400
+++ b/gcc-snapshot/gcc/toplev.c	2012-03-25 17:00:19.527225426 +0400
@@ -637,13 +637,13 @@
     {
 #if defined ASM_OUTPUT_ALIGNED_DECL_COMMON
       ASM_OUTPUT_ALIGNED_DECL_COMMON (asm_out_file, NULL_TREE,
-				      "__gnu_lto_v1",
+				      "__kernelgen",
 				      (unsigned HOST_WIDE_INT) 1, 8);
 #elif defined ASM_OUTPUT_ALIGNED_COMMON
-      ASM_OUTPUT_ALIGNED_COMMON (asm_out_file, "__gnu_lto_v1",
+      ASM_OUTPUT_ALIGNED_COMMON (asm_out_file, "__kernelgen",
 				 (unsigned HOST_WIDE_INT) 1, 8);
 #else
-      ASM_OUTPUT_COMMON (asm_out_file, "__gnu_lto_v1",
+      ASM_OUTPUT_COMMON (asm_out_file, "__kernelgen",
 			 (unsigned HOST_WIDE_INT) 1,
 			 (unsigned HOST_WIDE_INT) 1);
 #endif
--- a/gcc-snapshot/gcc/collect2.c	2013-01-13 21:03:20.000000000 +0300
+++ b/gcc-snapshot/gcc/collect2.c	2013-01-14 01:07:23.000000000 +0300
@@ -936,16 +936,29 @@
     num_lto_c_args++;
   }
 
-  if (lto_objects.first)
+  /* For KernelGen without fallback and without old linker scheme -
+     never invoke the LTO backend (below).  All required job is already
+     done by kernelgen-simple executed as LTO plugin, instead of lto-wrapper.  */
+  const char* cfallback = getenv("KERNELGEN_FALLBACK");
+  int fallback = 0;
+  if (cfallback) {
+    fallback = atoi(cfallback);
+  }
+  cfallback = getenv("KERNELGEN_OLD_LINKER");
+  if (cfallback) {
+    fallback = fallback || atoi(cfallback);
+  }
+
+  if (lto_objects.first && fallback)
     {
       char **lto_c_argv;
       const char **lto_c_ptr;
       char **p;
       char **lto_o_ptr;
       struct lto_object *list;
-      char *lto_wrapper = getenv ("COLLECT_LTO_WRAPPER");
+      char *lto_wrapper = "kernelgen-simple";
       struct pex_obj *pex;
-      const char *prog = "lto-wrapper";
+      const char *prog = "kernelgen-simple";
       int lto_ld_argv_size = 0;
       char **out_lto_ld_argv;
       int out_lto_ld_argv_size;
@@ -1051,8 +1064,20 @@
 	    out_lto_ld_argv[out_lto_ld_argv_size++] = *p;
 	  p++;
         }
+
       out_lto_ld_argv[out_lto_ld_argv_size++] = 0;
 
+      if (debug)
+      {
+        int i = 0;
+        while (out_lto_ld_argv[i])
+        {
+          printf("%s ", out_lto_ld_argv[i]);
+          i++;
+        }
+        printf("\n");
+      }
+
       /* Run the linker again, this time replacing the object files
          optimized by the LTO with the temporary file generated by the LTO.  */
       fork_execute ("ld", out_lto_ld_argv);
@@ -1183,9 +1208,32 @@
   /* Do not invoke xcalloc before this point, since locale needs to be
      set first, in case a diagnostic is issued.  */
 
-  ld1_argv = XCNEWVEC (char *, argc + 4);
+  /* KernelGen passes paths from LIBRARY_PATH environmental variables
+     to linker as -rpath arguments. Here we count how many extra args
+     are needed for that and their total length.  */
+
+  int nrpaths = 0;
+#ifdef KERNELGEN_ENABLE_RPATHS
+  int szrpaths = 0;
+  char* library_path = getenv(LIBRARY_PATH_ENV);
+  if (!library_path)
+    {
+       error("LIBRARY_PATH must be defined!\n");
+    }
+  char* library_path_dup = xstrdup(library_path);
+  char* library_path_tok = strtok(library_path_dup, ":");
+  while (library_path_tok)
+    {
+      nrpaths++;
+      szrpaths += strlen(library_path_tok);
+      library_path_tok = strtok(NULL, ":");
+    }
+  free(library_path_dup);
+#endif
+
+  ld1_argv = XCNEWVEC (char *, argc + 6 + nrpaths);
   ld1 = CONST_CAST2 (const char **, char **, ld1_argv);
-  ld2_argv = XCNEWVEC (char *, argc + 11);
+  ld2_argv = XCNEWVEC (char *, argc + 13 + nrpaths);
   ld2 = CONST_CAST2 (const char **, char **, ld2_argv);
   object_lst = XCNEWVEC (char *, argc);
   object = CONST_CAST2 (const char **, char **, object_lst);
@@ -1245,6 +1293,13 @@
 #else
   output_file = DEFAULT_A_OUT_NAME;
 #endif
+  // For KernelGen without fallback - always use LTO.
+  const char* cfallback = getenv("KERNELGEN_FALLBACK");
+  int fallback = 0;
+  if (cfallback)
+    fallback = atoi(cfallback);
+  if (!fallback)
+    lto_mode = LTO_MODE_LTO;
 
   obstack_begin (&temporary_obstack, 0);
   temporary_firstobj = (char *) obstack_alloc (&temporary_obstack, 0);
@@ -1622,6 +1677,46 @@
 	}
     }
 
+  /* For KernelGen without fallback always make the following additions:
+     1) add --export-dynamic to use executable global symbols for resolving
+     dependencies of subsequently loaded kernel objects;
+     2) link against KernelGen runtime library.  */
+
+  const char* export_dynamic = "--export-dynamic";
+  const char* kernelgen_rt = "-lkernelgen-rt";
+  if (!fallback) {
+    *ld1++ = *ld2++ = export_dynamic;
+    *ld1++ = *ld2++ = kernelgen_rt;
+#ifdef COLLECT_EXPORT_LIST
+    add_to_list (&libs, kernelgen_rt);
+#endif
+  }
+
+  /* Regardless KernelGen fallback mode, also do the following:
+     1) create a vector incorporating -rpath linker argument for each
+     LIBRARY_PATH token;
+     2) add -rpath arguments to the linker command line.  */
+
+#ifdef KERNELGEN_ENABLE_RPATHS
+  char* rpaths = XCNEWVEC(char, szrpaths + nrpaths * (strlen("-rpath=") + 1));
+  char* rpaths_ptr = rpaths;
+  library_path_dup = xstrdup(library_path);
+  library_path_tok = strtok(library_path_dup, ":");
+  while (library_path_tok)
+    {
+      char* rpath_arg = rpaths_ptr;
+      memcpy(rpaths_ptr, "-rpath=", strlen("-rpath="));
+      rpaths_ptr += strlen("-rpath=");
+      memcpy(rpaths_ptr, library_path_tok, strlen(library_path_tok));
+      rpaths_ptr += strlen(library_path_tok);
+      *rpaths_ptr = '\0';
+      rpaths_ptr++;
+      *ld1++ = *ld2++ = rpath_arg;
+      library_path_tok = strtok(NULL, ":");
+    }
+  free(library_path_dup);
+#endif
+
 #ifdef COLLECT_EXPORT_LIST
   /* This is added only for debugging purposes.  */
   if (debug)
@@ -1949,6 +2044,10 @@
   maybe_unlink (export_file);
 #endif
 
+#ifdef KERNELGEN_ENABLE_RPATHS
+  free(rpaths);
+#endif
+
   return 0;
 }
 
@@ -2668,8 +2767,8 @@
              the LTO objects list if found.  */
           for (p = buf; (ch = *p) != '\0' && ch != '\n'; p++)
             if (ch == ' '  && p[1] == '_' && p[2] == '_'
-		&& (strncmp (p + (p[3] == '_' ? 2 : 1), "__gnu_lto_v1", 12) == 0)
-		&& ISSPACE (p[p[3] == '_' ? 14 : 13]))
+		&& (strncmp (p + (p[3] == '_' ? 2 : 1), "__kernelgen", 11) == 0)
+		&& ISSPACE (p[p[3] == '_' ? 13 : 12]))
               {
                 add_lto_object (&lto_objects, prog_name);
 
--- a/gcc-snapshot/gcc/Makefile.in	2013-09-16 04:33:23.487766825 +0400
+++ b/gcc-snapshot/gcc/Makefile.in	2013-09-16 04:33:35.783765522 +0400
@@ -1021,7 +1021,7 @@
 LIBS = @LIBS@ libcommon.a $(CPPLIB) $(LIBINTL) $(LIBICONV) $(LIBBACKTRACE) \
 	$(LIBIBERTY) $(LIBDECNUMBER) $(HOST_LIBS)
 BACKENDLIBS = $(CLOOGLIBS) $(GMPLIBS) $(PLUGINLIBS) $(HOST_LIBS) \
-	$(ZLIB)
+	$(ZLIB) -lelf
 # Any system libraries needed just for GNAT.
 SYSLIBS = @GNAT_LIBEXC@
 
--- a/gcc-snapshot/gcc/main.c	2013-01-10 21:38:27.000000000 +0100
+++ b/gcc-snapshot/gcc/main.c	2013-10-11 18:47:32.672915125 +0200
@@ -24,14 +24,288 @@
 #include "diagnostic-core.h"
 #include "toplev.h"
 
-int main (int argc, char **argv);
+#include <stdlib.h>
+#include <fcntl.h>
+#include <gelf.h>	
+#include <libelf.h>
+
+#include <string>
+#include <vector>
+
+using namespace std;
 
 /* We define main() to call toplev_main(), which is defined in toplev.c.
    We do this in a separate file in order to allow the language front-end
    to define a different main(), if it so desires.  */
+int main (int argc, char **argv);
+
+/* We define an intermediate buffer to store the dragonegg.so plugin result.
+   It will be then used as libkernelgen-ct.so plugin input.  */
+string dragonegg_result = "";
+
+/* It seems GCC does not care about cleaning up its
+   state completely after processing. Well, it's reasonable,
+   since the tool is not really designed to support multiple
+   compilation passes in a single launch.
+   In out approach we perform two compilation passes, thus
+   GCC state must be reset before the second pass.
+   To archive that, we will backup .data and .bss symbols
+   initial state and rewrite them after finishing the first pass.  */
+vector<char> obj_data_vector;
+static char* obj_data;
+int load_self_elf(Elf** e, Elf_Data** symbols,
+  int* nsymbols, int* idata, int* ibss)
+{
+  const char* filename = "/proc/self/exe";
+  int fd = open(filename, O_RDONLY);
+  if (fd < 0)
+  {
+    fprintf(stderr, "Cannot open %s\n", filename);
+    return 1;
+  }
+  if (elf_version(EV_CURRENT) == EV_NONE)
+  {
+    fprintf(stderr, "ELF library initialization failed: %s\n",
+      elf_errmsg(-1));
+    return 1;
+  }
+  *e = elf_begin(fd, ELF_C_READ, NULL);
+  if (!*e)
+  {
+    fprintf(stderr, "elf_begin() failed: %s\n", elf_errmsg(-1));
+    return 1;
+  }
+  size_t shstrndx;
+  if (elf_getshdrstrndx(*e, &shstrndx))
+  {
+    fprintf(stderr, "elf_getshdrstrndx() failed: %s\n",
+      elf_errmsg(-1));
+    return 1;
+  }
+  Elf_Scn* scn = elf_nextscn(*e, NULL);
+  for (int i = 1; scn != NULL; scn = elf_nextscn(*e, scn), i++)
+  {
+    GElf_Shdr shdr;
+    if (!gelf_getshdr(scn, &shdr))
+    {
+      fprintf(stderr, "gelf_getshdr() failed for %s\n",
+        elf_errmsg(-1));
+      return 1;
+    }
+
+    if (shdr.sh_type == SHT_SYMTAB)
+    {
+      *symbols = elf_getdata(scn, NULL);
+      if (!symbols)
+      {
+        fprintf(stderr, "elf_getdata() failed for %s\n",
+          elf_errmsg(-1));
+        return 1;
+      }
+      if (shdr.sh_entsize)
+        *nsymbols = shdr.sh_size / shdr.sh_entsize;
+    }
+
+    char* name = NULL;
+    if ((name = elf_strptr(*e, shstrndx, shdr.sh_name)) == NULL)
+    {
+      fprintf(stderr, "Cannot read the section %d name\n", i);
+    }
+
+    if (!strcmp(name, ".data")) *idata = i;
+    if (!strcmp(name, ".bss")) *ibss = i;
+  }
+  if (!*symbols)
+  {
+    fprintf(stderr, "Cannot find symbols table\n");
+    return 1;
+  }
+  
+  return 0;
+}
+
+/* We need to provide a fallback anchor for plugins to activate in case of
+   kernelgen-related failure. This way we can recover from minor issues and
+   compile huge projects  */
+static int gargc;
+static char** gargv;
+extern "C" void fallback(void*)
+{
+  Elf* e;
+  Elf_Data* symbols = NULL;
+  int nsymbols = 0, idata = -1, ibss = -1;
+  if (load_self_elf(&e, &symbols, &nsymbols, &idata, &ibss))
+    return;
+
+  // For each symbol:
+  // If symbol is object, restore its initial value.
+  char* obj_data_ptr = obj_data;
+  for (int isymbol = 0; isymbol < nsymbols; isymbol++)
+  {
+    GElf_Sym symbol;
+    gelf_getsym(symbols, isymbol, &symbol);
+    if ((GELF_ST_TYPE(symbol.st_info) == STT_OBJECT) &&
+      ((symbol.st_shndx == idata) || (symbol.st_shndx == ibss)))
+    {
+      memcpy((void*)symbol.st_value, obj_data_ptr, symbol.st_size);
+      obj_data_ptr += symbol.st_size;
+    }
+  }
+  elf_end(e);
+
+  toplev_main(gargc, gargv);
+  exit(0);
+}
 
 int
 main (int argc, char **argv)
 {
-  return toplev_main (argc, argv);
+  gargc = argc;
+  gargv = argv;
+
+  // Check what mode is used: kernelgen or fallback.
+  // In case of kernelgen we will first create a temporary
+  // output file, generate it, and then stage through
+  // the kernelgen_link external function. This function
+  // should put the final output into the real output file.
+  // In case of fallback, the process is similar to the
+  // regular gcc's collect: no any extra activities, just
+  // generate directly to the output file and done.
+  const char* cfallback = getenv("KERNELGEN_FALLBACK");
+  if (cfallback) {
+    int fallback = atoi(cfallback);
+    if (fallback) {
+      return toplev_main(argc, argv);
+    }
+  }
+
+  Elf* e;
+  Elf_Data* symbols = NULL;
+  int nsymbols = 0, idata = -1, ibss = -1;
+  if (load_self_elf(&e, &symbols, &nsymbols, &idata, &ibss))
+    return 1;
+
+  // For each symbol:
+  // If symbol is object, account its size.
+  // Also track the total number of objects.
+  size_t obj_total_size = 0, nobj = 0;
+  for (int isymbol = 0; isymbol < nsymbols; isymbol++)
+  {
+    GElf_Sym symbol;
+    gelf_getsym(symbols, isymbol, &symbol);
+    if ((GELF_ST_TYPE(symbol.st_info) == STT_OBJECT) &&
+      ((symbol.st_shndx == idata) || (symbol.st_shndx == ibss)))
+    {
+      obj_total_size += symbol.st_size;
+      nobj++;
+    }
+  }
+
+  // Allocate a vector to store objects initial values
+  obj_data_vector.resize(obj_total_size);
+  obj_data = (char*)&obj_data_vector[0];
+
+  // For each symbol:
+  // If symbol is object, record its size and initial content.
+  char* obj_data_ptr = obj_data;
+  for (int isymbol = 0; isymbol < nsymbols; isymbol++)
+  {
+    GElf_Sym symbol;
+    gelf_getsym(symbols, isymbol, &symbol);
+    if ((GELF_ST_TYPE(symbol.st_info) == STT_OBJECT) &&
+      ((symbol.st_shndx == idata) || (symbol.st_shndx == ibss)))
+    {
+      memcpy(obj_data_ptr, (const void*)symbol.st_value, symbol.st_size);
+      obj_data_ptr += symbol.st_size;
+    }
+  }
+
+  // Run compiler with dragonegg plugin enabled.
+  // DragonEgg trashes the regular gcc output, so we
+  // will need to invoke gcc once again to get the regular
+  // assembly output.
+  int rcompiler = 0;
+  {
+    // Create new argc & argv.
+    int compiler_argc = argc + 7; // + 7 more arguments
+    vector<const char*> compiler_argv_vector;
+    compiler_argv_vector.resize(compiler_argc + 1);
+    char** compiler_argv = (char**)&compiler_argv_vector[0];
+
+    // Disable debug info generation in DragonEgg, since it is not
+    // currently handled correctly by loop extraction pass & Co.
+    int i = 0; for (int k = 0; k < argc; k++)
+      if (strcmp(argv[k], "-g"))
+        compiler_argv[i++] = argv[k];
+    string plugin_path = "-fplugin=dragonegg.so";
+    compiler_argv[i++] = (char*)plugin_path.c_str();
+    compiler_argv[i++] = "-fplugin-arg-dragonegg-emit-ir";
+    compiler_argv[i++] = "-fplugin-arg-dragonegg-llvm-ir-optimize=0";
+    char* gccopt = getenv("KERNELGEN_GCC_OPT");
+    if (gccopt)
+    {
+      compiler_argv[i++] = "-fplugin-arg-dragonegg-enable-gcc-optzns";
+      compiler_argv[i++] = gccopt;
+    }
+    compiler_argv[i++] = "-fplugin-arg-dragonegg-internal-output";
+
+    // Issue no .ident inline asm record, as it is incompatible with ptx.
+    compiler_argv[i++] = "-fno-ident";
+
+    compiler_argv[i++] = "-D_KERNELGEN";
+    compiler_argv[i++] = NULL;
+
+    rcompiler = toplev_main(i - 1, compiler_argv);
+  }
+
+  // Check the DragonEgg result.
+  // If no result or error status, then exit now.
+  if (!dragonegg_result.size() || rcompiler) return rcompiler;
+
+  // Backup the DragonEgg result.
+  string dragonegg_result_backup = dragonegg_result;
+
+  // For each symbol:
+  // If symbol is object, restore its initial value.
+  obj_data_ptr = obj_data;
+  for (int isymbol = 0; isymbol < nsymbols; isymbol++)
+  {
+    GElf_Sym symbol;
+    gelf_getsym(symbols, isymbol, &symbol);
+    if ((GELF_ST_TYPE(symbol.st_info) == STT_OBJECT) &&
+      ((symbol.st_shndx == idata) || (symbol.st_shndx == ibss)))
+    {
+      memcpy((void*)symbol.st_value, obj_data_ptr, symbol.st_size);
+      obj_data_ptr += symbol.st_size;
+    }
+  }
+  elf_end(e);
+
+  // Restore the DragonEgg result.
+  dragonegg_result = dragonegg_result_backup;
+
+  // Run compiler with kernelgen-ct.
+  // This time compiler should generate a regular assembly
+  // file, where plugin also inserts a symbol containing
+  // DragonEgg output.
+  // Also we enable LTO by default, since kernelgen
+  // linking is based on LTO.
+  {
+    // Create new argc & argv.
+    int compiler_argc = argc + 3; // + 3 more arguments
+    vector<const char*> compiler_argv_vector;
+    compiler_argv_vector.resize(compiler_argc + 1);
+    char** compiler_argv = (char**)&compiler_argv_vector[0];
+    int i = 0; for ( ; i < argc; i++)
+      compiler_argv[i] = argv[i];
+    string plugin_path = "-fplugin=libkernelgen-ct.so";
+    compiler_argv[i++] = (char*)plugin_path.c_str();
+    compiler_argv[i++] = "-D_KERNELGEN";
+    compiler_argv[i++] = "-flto";
+    compiler_argv[i++] = NULL;
+
+    rcompiler = toplev_main(i - 1, compiler_argv);
+  }
+
+  return rcompiler;
 }
--- a/gcc-snapshot/Makefile.in	2013-10-24 11:39:07.897506804 +0200
+++ b/gcc-snapshot/Makefile.in	2013-10-24 11:47:17.797527113 +0200
@@ -237,13 +237,13 @@
 POSTSTAGE1_CXX_EXPORT = \
 	CXX="$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/prev-gcc/xg++$(exeext) \
 	  -B$$r/$(HOST_SUBDIR)/prev-gcc/ -B$(build_tooldir)/bin/ -nostdinc++ \
-	  -B$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/src/.libs \
-	  -B$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/libsupc++/.libs \
-	  -I$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/include/$(TARGET_SUBDIR) \
-	  -I$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/include \
+	  -B$$r/prev-$(TARGET_SUBDIR)/32/libstdc++-v3/src/.libs \
+	  -B$$r/prev-$(TARGET_SUBDIR)/32/libstdc++-v3/libsupc++/.libs \
+	  -I$$r/prev-$(TARGET_SUBDIR)/32/libstdc++-v3/include/$(TARGET_SUBDIR) \
+	  -I$$r/prev-$(TARGET_SUBDIR)/32/libstdc++-v3/include \
 	  -I$$s/libstdc++-v3/libsupc++ \
-	  -L$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/src/.libs \
-	  -L$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/libsupc++/.libs"; \
+	  -L$$r/prev-$(TARGET_SUBDIR)/32/libstdc++-v3/src/.libs \
+	  -L$$r/prev-$(TARGET_SUBDIR)/32/libstdc++-v3/libsupc++/.libs"; \
 	  export CXX; \
 	CXX_FOR_BUILD="$$CXX"; export CXX_FOR_BUILD;
 @endif target-libstdc++-v3-bootstrap
